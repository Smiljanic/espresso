/* Generated by Cython 0.23.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__espressomd___system
#define __PYX_HAVE_API__espressomd___system
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "grid.hpp"
#include "communication.hpp"
#include "global.hpp"
#include "integrate.hpp"
#include "verlet.hpp"
#include "lattice.hpp"
#include "domain_decomposition.hpp"
#include "particle_data.hpp"
#include "interaction_data.hpp"
#include "thermostat.hpp"
#include "dpd.hpp"
#include "cells.hpp"
#include "layered.hpp"
#include "rattle.hpp"
#include "tuning.hpp"
#include "imd.hpp"
#include "npt.hpp"
#include "statistics.hpp"
#include "reaction.hpp"
#include "string.h"
#include <string>
#include <list>
#include "config.hpp"
#include "errorhandling.hpp"
#include "cuda_init.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "espressomd/_system.pyx",
};

/*--- Type declarations ---*/
struct __pyx_obj_10espressomd_7_system_System;

/* "espressomd/_system.pyx":39
 *                     "time_step","timings"]
 * 
 * cdef class System:             # <<<<<<<<<<<<<<
 *     doge = 1
 *     part = particle_data.ParticleList()
 */
struct __pyx_obj_10espressomd_7_system_System {
  PyObject_HEAD
};


/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE long __Pyx_mod_long(long, long);

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

static CYTHON_INLINE long __Pyx_div_long(long, long);

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'globals' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.list' */

/* Module declarations from 'espressomd.integrate' */

/* Module declarations from 'espressomd.cuda_init' */

/* Module declarations from 'espressomd._system' */
static PyTypeObject *__pyx_ptype_10espressomd_7_system_System = 0;
static bool __pyx_v_10espressomd_7_system_skin_set;
#define __Pyx_MODULE_NAME "espressomd._system"
int __pyx_module_is_main_espressomd___system = 0;

/* Implementation of 'espressomd._system' */
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static char __pyx_k_x[] = "x";
static char __pyx_k_y[] = "y";
static char __pyx_k_z[] = "z";
static char __pyx_k__3[] = ")";
static char __pyx_k_np[] = "np";
static char __pyx_k_dir[] = "dir";
static char __pyx_k_xyz[] = "xyz";
static char __pyx_k_doge[] = "doge";
static char __pyx_k_keys[] = "keys";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_part[] = "part";
static char __pyx_k_seed[] = "__seed";
static char __pyx_k_skin[] = "skin";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_time[] = "time";
static char __pyx_k_array[] = "array";
static char __pyx_k_box_l[] = "box_l";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_range[] = "range";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_Actors[] = "Actors";
static char __pyx_k_actors[] = "actors";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_system[] = "_system";
static char __pyx_k_n_nodes[] = "n_nodes";
static char __pyx_k_ndarray[] = "ndarray";
static char __pyx_k_setattr[] = "__setattr__";
static char __pyx_k_timings[] = "timings";
static char __pyx_k_pyx_capi[] = "__pyx_capi__";
static char __pyx_k_skin_set[] = "skin_set";
static char __pyx_k_code_info[] = "code_info";
static char __pyx_k_cuda_init[] = "cuda_init";
static char __pyx_k_node_grid[] = "node_grid";
static char __pyx_k_time_step[] = "time_step";
static char __pyx_k_CellSystem[] = "CellSystem";
static char __pyx_k_Thermostat[] = "Thermostat";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_cellsystem[] = "cellsystem";
static char __pyx_k_npt_p_diff[] = "npt_p_diff";
static char __pyx_k_npt_piston[] = "npt_piston";
static char __pyx_k_thermostat[] = "thermostat";
static char __pyx_k_adress_vars[] = "adress_vars";
static char __pyx_k_cell_system[] = "cell_system";
static char __pyx_k_periodicity[] = "periodicity";
static char __pyx_k_ParticleList[] = "ParticleList";
static char __pyx_k_bonded_inter[] = "bonded_inter";
static char __pyx_k_getattribute[] = "__getattribute__";
static char __pyx_k_interactions[] = "interactions";
static char __pyx_k_max_num_cells[] = "max_num_cells";
static char __pyx_k_min_num_cells[] = "min_num_cells";
static char __pyx_k_particle_data[] = "particle_data";
static char __pyx_k_Skin_must_be_0[] = "Skin must be >= 0";
static char __pyx_k_non_bonded_inter[] = "non_bonded_inter";
static char __pyx_k_BondedInteractions[] = "BondedInteractions";
static char __pyx_k_setable_properties[] = "setable_properties";
static char __pyx_k_No_negative_lengths[] = "No negative lengths";
static char __pyx_k_npt_piston_must_be_0[] = "npt_piston must be > 0";
static char __pyx_k_NonBondedInteractions[] = "NonBondedInteractions";
static char __pyx_k_Simulation_time_must_be_0[] = "Simulation time must be >= 0";
static char __pyx_k_Time_Step_must_be_positive[] = "Time Step must be positive";
static char __pyx_k_node_grid_must_be_of_length_3[] = "node_grid must be of length 3";
static char __pyx_k_Box_length_must_be_of_length_3[] = "Box length must be of length 3";
static char __pyx_k_node_grid_does_not_fit_n_nodes[] = "node_grid does not fit n_nodes (";
static char __pyx_k_Until_we_can_handle_conditional[] = "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface";
static char __pyx_k_min_num_cells_must_be_processor[] = "min_num_cells must be >= processor_min_num_cells (currently ";
static char __pyx_k_periodicity_must_be_of_length_3[] = "periodicity must be of length 3, got length ";
static char __pyx_k_Box_length_must_be_0_in_all_dire[] = "Box length must be > 0 in all directions";
static char __pyx_k_The_list_needs_to_contain_one_se[] = "The list needs to contain one seed value per node";
static char __pyx_k_The_seed_has_to_be_an_integer_or[] = "The seed has to be an integer or a list of integers with one integer per node";
static char __pyx_k_Usage_changeVolume_V_new_L_new_x[] = "Usage: changeVolume { <V_new> | <L_new> { \"x\" | \"y\" | \"z\" | \"xyz\" } }";
static char __pyx_k_max_num_cells_must_be_min_num_ce[] = "max_num_cells must be >= min_num_cells (currently ";
static char __pyx_k_min_num_cells_must_be_max_num_ce[] = "min_num_cells must be <= max_num_cells (currently ";
static char __pyx_k_node_grid_must_be_0_in_all_direc[] = "node_grid must be > 0 in all directions";
static PyObject *__pyx_n_s_Actors;
static PyObject *__pyx_n_s_BondedInteractions;
static PyObject *__pyx_kp_s_Box_length_must_be_0_in_all_dire;
static PyObject *__pyx_kp_s_Box_length_must_be_of_length_3;
static PyObject *__pyx_n_s_CellSystem;
static PyObject *__pyx_kp_s_No_negative_lengths;
static PyObject *__pyx_n_s_NonBondedInteractions;
static PyObject *__pyx_n_s_ParticleList;
static PyObject *__pyx_kp_s_Simulation_time_must_be_0;
static PyObject *__pyx_kp_s_Skin_must_be_0;
static PyObject *__pyx_kp_s_The_list_needs_to_contain_one_se;
static PyObject *__pyx_kp_s_The_seed_has_to_be_an_integer_or;
static PyObject *__pyx_n_s_Thermostat;
static PyObject *__pyx_kp_s_Time_Step_must_be_positive;
static PyObject *__pyx_kp_s_Until_we_can_handle_conditional;
static PyObject *__pyx_kp_s_Usage_changeVolume_V_new_L_new_x;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_n_s_actors;
static PyObject *__pyx_n_s_adress_vars;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_bonded_inter;
static PyObject *__pyx_n_s_box_l;
static PyObject *__pyx_n_s_cell_system;
static PyObject *__pyx_n_s_cellsystem;
static PyObject *__pyx_n_s_code_info;
static PyObject *__pyx_n_s_cuda_init;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_doge;
static PyObject *__pyx_n_s_getattribute;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_interactions;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_num_cells;
static PyObject *__pyx_kp_s_max_num_cells_must_be_min_num_ce;
static PyObject *__pyx_n_s_min_num_cells;
static PyObject *__pyx_kp_s_min_num_cells_must_be_max_num_ce;
static PyObject *__pyx_kp_s_min_num_cells_must_be_processor;
static PyObject *__pyx_n_s_n_nodes;
static PyObject *__pyx_n_s_ndarray;
static PyObject *__pyx_n_s_node_grid;
static PyObject *__pyx_kp_s_node_grid_does_not_fit_n_nodes;
static PyObject *__pyx_kp_s_node_grid_must_be_0_in_all_direc;
static PyObject *__pyx_kp_s_node_grid_must_be_of_length_3;
static PyObject *__pyx_n_s_non_bonded_inter;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_npt_p_diff;
static PyObject *__pyx_n_s_npt_piston;
static PyObject *__pyx_kp_s_npt_piston_must_be_0;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_part;
static PyObject *__pyx_n_s_particle_data;
static PyObject *__pyx_n_s_periodicity;
static PyObject *__pyx_kp_s_periodicity_must_be_of_length_3;
static PyObject *__pyx_n_s_pyx_capi;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_seed;
static PyObject *__pyx_n_s_setable_properties;
static PyObject *__pyx_n_s_setattr;
static PyObject *__pyx_n_s_skin;
static PyObject *__pyx_n_s_skin_set;
static PyObject *__pyx_n_s_system;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thermostat;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_time_step;
static PyObject *__pyx_n_s_timings;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xyz;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_zeros;
static int __pyx_pf_10espressomd_7_system_6System___init__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_2__getstate__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_4__setstate__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v_params); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_5box_l___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__box_l); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_5box_l_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9cell_grid___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9cell_size___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9dpd_gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9dpd_r_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_5gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_12integ_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_11local_box_l___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_7max_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_13max_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, int __pyx_v__max_num_cells); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_13max_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_13min_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, int __pyx_v__min_num_cells); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_13min_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_8max_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9max_range___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_8max_skin___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_8n_layers___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_7n_nodes___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_6n_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_12n_part_types___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_12n_rigidbonds___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_9node_grid___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__node_grid); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9node_grid_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_13nptiso_gamma0___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_13nptiso_gammav___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9npt_p_ext___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_10npt_p_inst___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_13npt_p_inst_av___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_10npt_piston___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__npt_piston); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_10npt_piston_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_10npt_p_diff___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__npt_p_diff); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_10npt_p_diff_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_11periodicity___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__periodic); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_11periodicity_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_4skin___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, double __pyx_v__skin); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_4skin_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_11temperature___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_13thermo_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_4time___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, double __pyx_v__time); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_4time_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_9time_step___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, double __pyx_v__time_step); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_9time_step_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_7timings___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, int __pyx_v__timings); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_7timings_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_13transfer_rate___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_17max_cut_nonbonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_12verlet_reuse___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_14lattice_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_10dpd_tgamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_10dpd_tr_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_7dpd_twf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_6dpd_wf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_11adress_vars___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_14max_cut_bonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static int __pyx_pf_10espressomd_7_system_6System_4seed___set__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__seed); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_4seed_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10espressomd_7_system_6System_6change_volume_and_rescale_particles(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_d_new, PyObject *__pyx_v_dir); /* proto */
static PyObject *__pyx_tp_new_10espressomd_7_system_System(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;

/* "espressomd/_system.pyx":47
 *     thermostat = Thermostat()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.actors = Actors(_system=self)
 * 
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System___init__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System___init__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "espressomd/_system.pyx":48
 * 
 *     def __init__(self):
 *         self.actors = Actors(_system=self)             # <<<<<<<<<<<<<<
 * 
 * #        self.part = particle_data.particleList()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Actors); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_system, ((PyObject *)__pyx_v_self)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_actors, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "espressomd/_system.pyx":47
 *     thermostat = Thermostat()
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.actors = Actors(_system=self)
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd._system.System.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":55
 * 
 *     # __getstate__ and __setstate__ define the pickle interaction
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         odict={}
 *         for property_ in setable_properties:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_3__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_3__getstate__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_2__getstate__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_2__getstate__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_v_odict = NULL;
  PyObject *__pyx_v_property_ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getstate__", 0);

  /* "espressomd/_system.pyx":56
 *     # __getstate__ and __setstate__ define the pickle interaction
 *     def __getstate__(self):
 *         odict={}             # <<<<<<<<<<<<<<
 *         for property_ in setable_properties:
 *             odict[property_] = System.__getattribute__(self,property_)
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_odict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "espressomd/_system.pyx":57
 *     def __getstate__(self):
 *         odict={}
 *         for property_ in setable_properties:             # <<<<<<<<<<<<<<
 *             odict[property_] = System.__getattribute__(self,property_)
 *         return odict
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_setable_properties); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_property_, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "espressomd/_system.pyx":58
 *         odict={}
 *         for property_ in setable_properties:
 *             odict[property_] = System.__getattribute__(self,property_)             # <<<<<<<<<<<<<<
 *         return odict
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10espressomd_7_system_System), __pyx_n_s_getattribute); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_property_);
    __Pyx_GIVEREF(__pyx_v_property_);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_property_);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(PyDict_SetItem(__pyx_v_odict, __pyx_v_property_, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "espressomd/_system.pyx":57
 *     def __getstate__(self):
 *         odict={}
 *         for property_ in setable_properties:             # <<<<<<<<<<<<<<
 *             odict[property_] = System.__getattribute__(self,property_)
 *         return odict
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":59
 *         for property_ in setable_properties:
 *             odict[property_] = System.__getattribute__(self,property_)
 *         return odict             # <<<<<<<<<<<<<<
 * 
 *     def __setstate__(self,params):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_odict);
  __pyx_r = __pyx_v_odict;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":55
 * 
 *     # __getstate__ and __setstate__ define the pickle interaction
 *     def __getstate__(self):             # <<<<<<<<<<<<<<
 *         odict={}
 *         for property_ in setable_properties:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("espressomd._system.System.__getstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_odict);
  __Pyx_XDECREF(__pyx_v_property_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":61
 *         return odict
 * 
 *     def __setstate__(self,params):             # <<<<<<<<<<<<<<
 *         for property_ in params.keys():
 *             System.__setattr__(self,property_,params[property_])
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_5__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_params); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_5__setstate__(PyObject *__pyx_v_self, PyObject *__pyx_v_params) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_4__setstate__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((PyObject *)__pyx_v_params));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_4__setstate__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v_params) {
  PyObject *__pyx_v_property_ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate__", 0);

  /* "espressomd/_system.pyx":62
 * 
 *     def __setstate__(self,params):
 *         for property_ in params.keys():             # <<<<<<<<<<<<<<
 *             System.__setattr__(self,property_,params[property_])
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_params, __pyx_n_s_keys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_property_, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "espressomd/_system.pyx":63
 *     def __setstate__(self,params):
 *         for property_ in params.keys():
 *             System.__setattr__(self,property_,params[property_])             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10espressomd_7_system_System), __pyx_n_s_setattr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_params, __pyx_v_property_); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_8 = 1;
      }
    }
    __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_property_);
    __Pyx_GIVEREF(__pyx_v_property_);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_property_);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "espressomd/_system.pyx":62
 * 
 *     def __setstate__(self,params):
 *         for property_ in params.keys():             # <<<<<<<<<<<<<<
 *             System.__setattr__(self,property_,params[property_])
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":61
 *         return odict
 * 
 *     def __setstate__(self,params):             # <<<<<<<<<<<<<<
 *         for property_ in params.keys():
 *             System.__setattr__(self,property_,params[property_])
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("espressomd._system.System.__setstate__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_property_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":67
 * 
 *     property box_l:
 *         def __set__(self, _box_l):             # <<<<<<<<<<<<<<
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_5box_l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__box_l); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_5box_l_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__box_l) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_5box_l___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((PyObject *)__pyx_v__box_l));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_5box_l___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__box_l) {
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  double __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":68
 *     property box_l:
 *         def __set__(self, _box_l):
 *             if len(_box_l) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v__box_l); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":69
 *         def __set__(self, _box_l):
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":68
 *     property box_l:
 *         def __set__(self, _box_l):
 *             if len(_box_l) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):
 */
  }

  /* "espressomd/_system.pyx":70
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if _box_l[i] <= 0:
 *                     raise ValueError(
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "espressomd/_system.pyx":71
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):
 *                 if _box_l[i] <= 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "Box length must be > 0 in all directions")
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__box_l, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "espressomd/_system.pyx":72
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "Box length must be > 0 in all directions")
 *                 box_l[i] = _box_l[i]
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "espressomd/_system.pyx":71
 *                 raise ValueError("Box length must be of length 3")
 *             for i in range(3):
 *                 if _box_l[i] <= 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "Box length must be > 0 in all directions")
 */
    }

    /* "espressomd/_system.pyx":74
 *                     raise ValueError(
 *                         "Box length must be > 0 in all directions")
 *                 box_l[i] = _box_l[i]             # <<<<<<<<<<<<<<
 * 
 *             mpi_bcast_parameter(0)
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v__box_l, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_6 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (box_l[__pyx_v_i]) = __pyx_t_6;
  }

  /* "espressomd/_system.pyx":76
 *                 box_l[i] = _box_l[i]
 * 
 *             mpi_bcast_parameter(0)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(0);

  /* "espressomd/_system.pyx":67
 * 
 *     property box_l:
 *         def __set__(self, _box_l):             # <<<<<<<<<<<<<<
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("espressomd._system.System.box_l.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":78
 *             mpi_bcast_parameter(0)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([box_l[0], box_l[1], box_l[2]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_5box_l_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_5box_l_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_5box_l_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_5box_l_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":79
 * 
 *         def __get__(self):
 *             return np.array([box_l[0], box_l[1], box_l[2]])             # <<<<<<<<<<<<<<
 * 
 *     property cell_grid:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((box_l[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble((box_l[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((box_l[2])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":78
 *             mpi_bcast_parameter(0)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([box_l[0], box_l[1], box_l[2]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd._system.System.box_l.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":82
 * 
 *     property cell_grid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([dd.cell_grid[0], dd.cell_grid[1], dd.cell_grid[2]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9cell_grid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9cell_grid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9cell_grid___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9cell_grid___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":83
 *     property cell_grid:
 *         def __get__(self):
 *             return np.array([dd.cell_grid[0], dd.cell_grid[1], dd.cell_grid[2]])             # <<<<<<<<<<<<<<
 * 
 *     property cell_size:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int((dd.cell_grid[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int((dd.cell_grid[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int((dd.cell_grid[2])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":82
 * 
 *     property cell_grid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([dd.cell_grid[0], dd.cell_grid[1], dd.cell_grid[2]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd._system.System.cell_grid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":86
 * 
 *     property cell_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([dd.cell_size[0], dd.cell_size[1], dd.cell_size[2]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9cell_size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9cell_size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9cell_size___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9cell_size___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":87
 *     property cell_size:
 *         def __get__(self):
 *             return np.array([dd.cell_size[0], dd.cell_size[1], dd.cell_size[2]])             # <<<<<<<<<<<<<<
 * 
 *     property dpd_gamma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((dd.cell_size[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble((dd.cell_size[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((dd.cell_size[2])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":86
 * 
 *     property cell_size:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([dd.cell_size[0], dd.cell_size[1], dd.cell_size[2]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd._system.System.cell_size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":90
 * 
 *     property dpd_gamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return dpd_gamma
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9dpd_gamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9dpd_gamma_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9dpd_gamma___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9dpd_gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":91
 *     property dpd_gamma:
 *         def __get__(self):
 *             return dpd_gamma             # <<<<<<<<<<<<<<
 * 
 *     property dpd_r_cut:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_gamma); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":90
 * 
 *     property dpd_gamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return dpd_gamma
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.dpd_gamma.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":94
 * 
 *     property dpd_r_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return dpd_r_cut
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9dpd_r_cut_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9dpd_r_cut_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9dpd_r_cut___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9dpd_r_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":95
 *     property dpd_r_cut:
 *         def __get__(self):
 *             return dpd_r_cut             # <<<<<<<<<<<<<<
 * 
 *     property gamma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_r_cut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":94
 * 
 *     property dpd_r_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return dpd_r_cut
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.dpd_r_cut.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":98
 * 
 *     property gamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return langevin_gamma
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_5gamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_5gamma_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_5gamma___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_5gamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":99
 *     property gamma:
 *         def __get__(self):
 *             return langevin_gamma             # <<<<<<<<<<<<<<
 * 
 *     property integ_switch:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(langevin_gamma); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":98
 * 
 *     property gamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return langevin_gamma
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.gamma.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":102
 * 
 *     property integ_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return integ_switch
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_12integ_switch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_12integ_switch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_12integ_switch___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_12integ_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":103
 *     property integ_switch:
 *         def __get__(self):
 *             return integ_switch             # <<<<<<<<<<<<<<
 * 
 *     property local_box_l:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(integ_switch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":102
 * 
 *     property integ_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return integ_switch
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.integ_switch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":106
 * 
 *     property local_box_l:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([local_box_l[0], local_box_l[1], local_box_l[2]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_11local_box_l_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_11local_box_l_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_11local_box_l___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_11local_box_l___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":107
 *     property local_box_l:
 *         def __get__(self):
 *             return np.array([local_box_l[0], local_box_l[1], local_box_l[2]])             # <<<<<<<<<<<<<<
 * 
 *     property max_cut:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((local_box_l[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyFloat_FromDouble((local_box_l[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((local_box_l[2])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":106
 * 
 *     property local_box_l:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([local_box_l[0], local_box_l[1], local_box_l[2]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd._system.System.local_box_l.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":110
 * 
 *     property max_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_cut
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_7max_cut_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_7max_cut_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_7max_cut___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_7max_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":111
 *     property max_cut:
 *         def __get__(self):
 *             return max_cut             # <<<<<<<<<<<<<<
 * 
 *     property max_num_cells:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_cut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":110
 * 
 *     property max_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_cut
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.max_cut.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":114
 * 
 *     property max_num_cells:
 *         def __set__(self, int _max_num_cells):             # <<<<<<<<<<<<<<
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_13max_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__max_num_cells); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_13max_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__max_num_cells) {
  int __pyx_v__max_num_cells;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__max_num_cells); {
    __pyx_v__max_num_cells = __Pyx_PyInt_As_int(__pyx_arg__max_num_cells); if (unlikely((__pyx_v__max_num_cells == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd._system.System.max_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13max_num_cells___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((int)__pyx_v__max_num_cells));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_13max_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, int __pyx_v__max_num_cells) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":116
 *         def __set__(self, int _max_num_cells):
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "max_num_cells must be >= min_num_cells (currently " + str(min_num_cells) + ")")
 */
  __pyx_t_1 = ((__pyx_v__max_num_cells < min_num_cells) != 0);
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":118
 *             if _max_num_cells < min_num_cells:
 *                 raise ValueError(
 *                     "max_num_cells must be >= min_num_cells (currently " + str(min_num_cells) + ")")             # <<<<<<<<<<<<<<
 *             max_num_cells = _max_num_cells
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(min_num_cells); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_max_num_cells_must_be_min_num_ce, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "espressomd/_system.pyx":117
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "max_num_cells must be >= min_num_cells (currently " + str(min_num_cells) + ")")
 *             max_num_cells = _max_num_cells
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":116
 *         def __set__(self, int _max_num_cells):
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "max_num_cells must be >= min_num_cells (currently " + str(min_num_cells) + ")")
 */
  }

  /* "espressomd/_system.pyx":119
 *                 raise ValueError(
 *                     "max_num_cells must be >= min_num_cells (currently " + str(min_num_cells) + ")")
 *             max_num_cells = _max_num_cells             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS)
 * 
 */
  max_num_cells = __pyx_v__max_num_cells;

  /* "espressomd/_system.pyx":120
 *                     "max_num_cells must be >= min_num_cells (currently " + str(min_num_cells) + ")")
 *             max_num_cells = _max_num_cells
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(FIELD_MAXNUMCELLS);

  /* "espressomd/_system.pyx":114
 * 
 *     property max_num_cells:
 *         def __set__(self, int _max_num_cells):             # <<<<<<<<<<<<<<
 *             global max_num_cells
 *             if _max_num_cells < min_num_cells:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd._system.System.max_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":122
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_num_cells
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_13max_num_cells_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_13max_num_cells_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13max_num_cells_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_13max_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":123
 * 
 *         def __get__(self):
 *             return max_num_cells             # <<<<<<<<<<<<<<
 * 
 *     property min_num_cells:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(max_num_cells); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":122
 *             mpi_bcast_parameter(FIELD_MAXNUMCELLS)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_num_cells
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.max_num_cells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":126
 * 
 *     property min_num_cells:
 *         def __set__(self, int _min_num_cells):             # <<<<<<<<<<<<<<
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_13min_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__min_num_cells); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_13min_num_cells_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__min_num_cells) {
  int __pyx_v__min_num_cells;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__min_num_cells); {
    __pyx_v__min_num_cells = __Pyx_PyInt_As_int(__pyx_arg__min_num_cells); if (unlikely((__pyx_v__min_num_cells == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd._system.System.min_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13min_num_cells___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((int)__pyx_v__min_num_cells));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_13min_num_cells___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, int __pyx_v__min_num_cells) {
  int __pyx_v_min;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":128
 *         def __set__(self, int _min_num_cells):
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()             # <<<<<<<<<<<<<<
 *             if _min_num_cells < min:
 *                 raise ValueError(
 */
  __pyx_v_min = calc_processor_min_num_cells();

  /* "espressomd/_system.pyx":129
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()
 *             if _min_num_cells < min:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "min_num_cells must be >= processor_min_num_cells (currently " + str(min) + ")")
 */
  __pyx_t_1 = ((__pyx_v__min_num_cells < __pyx_v_min) != 0);
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":131
 *             if _min_num_cells < min:
 *                 raise ValueError(
 *                     "min_num_cells must be >= processor_min_num_cells (currently " + str(min) + ")")             # <<<<<<<<<<<<<<
 *             if _min_num_cells > max_num_cells:
 *                 raise ValueError(
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_min); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_min_num_cells_must_be_processor, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "espressomd/_system.pyx":130
 *             min = calc_processor_min_num_cells()
 *             if _min_num_cells < min:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "min_num_cells must be >= processor_min_num_cells (currently " + str(min) + ")")
 *             if _min_num_cells > max_num_cells:
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":129
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()
 *             if _min_num_cells < min:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "min_num_cells must be >= processor_min_num_cells (currently " + str(min) + ")")
 */
  }

  /* "espressomd/_system.pyx":132
 *                 raise ValueError(
 *                     "min_num_cells must be >= processor_min_num_cells (currently " + str(min) + ")")
 *             if _min_num_cells > max_num_cells:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "min_num_cells must be <= max_num_cells (currently " + str(max_num_cells) + ")")
 */
  __pyx_t_1 = ((__pyx_v__min_num_cells > max_num_cells) != 0);
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":134
 *             if _min_num_cells > max_num_cells:
 *                 raise ValueError(
 *                     "min_num_cells must be <= max_num_cells (currently " + str(max_num_cells) + ")")             # <<<<<<<<<<<<<<
 *             min_num_cells = _min_num_cells
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS)
 */
    __pyx_t_2 = __Pyx_PyInt_From_int(max_num_cells); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_min_num_cells_must_be_max_num_ce, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "espressomd/_system.pyx":133
 *                     "min_num_cells must be >= processor_min_num_cells (currently " + str(min) + ")")
 *             if _min_num_cells > max_num_cells:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "min_num_cells must be <= max_num_cells (currently " + str(max_num_cells) + ")")
 *             min_num_cells = _min_num_cells
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":132
 *                 raise ValueError(
 *                     "min_num_cells must be >= processor_min_num_cells (currently " + str(min) + ")")
 *             if _min_num_cells > max_num_cells:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "min_num_cells must be <= max_num_cells (currently " + str(max_num_cells) + ")")
 */
  }

  /* "espressomd/_system.pyx":135
 *                 raise ValueError(
 *                     "min_num_cells must be <= max_num_cells (currently " + str(max_num_cells) + ")")
 *             min_num_cells = _min_num_cells             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS)
 * 
 */
  min_num_cells = __pyx_v__min_num_cells;

  /* "espressomd/_system.pyx":136
 *                     "min_num_cells must be <= max_num_cells (currently " + str(max_num_cells) + ")")
 *             min_num_cells = _min_num_cells
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(FIELD_MINNUMCELLS);

  /* "espressomd/_system.pyx":126
 * 
 *     property min_num_cells:
 *         def __set__(self, int _min_num_cells):             # <<<<<<<<<<<<<<
 *             global min_num_cells
 *             min = calc_processor_min_num_cells()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd._system.System.min_num_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":138
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return min_num_cells
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_13min_num_cells_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_13min_num_cells_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13min_num_cells_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_13min_num_cells_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":139
 * 
 *         def __get__(self):
 *             return min_num_cells             # <<<<<<<<<<<<<<
 * 
 *     property max_part:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(min_num_cells); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":138
 *             mpi_bcast_parameter(FIELD_MINNUMCELLS)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return min_num_cells
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.min_num_cells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":142
 * 
 *     property max_part:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_seen_particle
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_8max_part_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_8max_part_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_8max_part___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_8max_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":143
 *     property max_part:
 *         def __get__(self):
 *             return max_seen_particle             # <<<<<<<<<<<<<<
 * 
 *     property max_range:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(max_seen_particle); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":142
 * 
 *     property max_part:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_seen_particle
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.max_part.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":146
 * 
 *     property max_range:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_range
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9max_range_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9max_range_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9max_range___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9max_range___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":147
 *     property max_range:
 *         def __get__(self):
 *             return max_range             # <<<<<<<<<<<<<<
 * 
 *     property max_skin:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_range); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":146
 * 
 *     property max_range:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_range
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.max_range.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":150
 * 
 *     property max_skin:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_skin
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_8max_skin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_8max_skin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_8max_skin___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_8max_skin___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":151
 *     property max_skin:
 *         def __get__(self):
 *             return max_skin             # <<<<<<<<<<<<<<
 * 
 *     property n_layers:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_skin); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":150
 * 
 *     property max_skin:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return max_skin
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.max_skin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":154
 * 
 *     property n_layers:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_layers
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_8n_layers_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_8n_layers_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_8n_layers___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_8n_layers___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":155
 *     property n_layers:
 *         def __get__(self):
 *             return n_layers             # <<<<<<<<<<<<<<
 * 
 *     property n_nodes:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(n_layers); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":154
 * 
 *     property n_layers:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_layers
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.n_layers.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":158
 * 
 *     property n_nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_nodes
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_7n_nodes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_7n_nodes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_7n_nodes___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_7n_nodes___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":159
 *     property n_nodes:
 *         def __get__(self):
 *             return n_nodes             # <<<<<<<<<<<<<<
 * 
 *     property n_part:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(n_nodes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":158
 * 
 *     property n_nodes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_nodes
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.n_nodes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":162
 * 
 *     property n_part:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_part
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_6n_part_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_6n_part_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_6n_part___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_6n_part___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":163
 *     property n_part:
 *         def __get__(self):
 *             return n_part             # <<<<<<<<<<<<<<
 * 
 *     property n_part_types:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(n_part); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":162
 * 
 *     property n_part:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_part
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.n_part.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":166
 * 
 *     property n_part_types:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_particle_types
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_12n_part_types_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_12n_part_types_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_12n_part_types___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_12n_part_types___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":167
 *     property n_part_types:
 *         def __get__(self):
 *             return n_particle_types             # <<<<<<<<<<<<<<
 * 
 *     property n_rigidbonds:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(n_particle_types); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":166
 * 
 *     property n_part_types:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_particle_types
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.n_part_types.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":170
 * 
 *     property n_rigidbonds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_rigidbonds
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_12n_rigidbonds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_12n_rigidbonds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_12n_rigidbonds___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_12n_rigidbonds___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":171
 *     property n_rigidbonds:
 *         def __get__(self):
 *             return n_rigidbonds             # <<<<<<<<<<<<<<
 * 
 *     property node_grid:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(n_rigidbonds); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":170
 * 
 *     property n_rigidbonds:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return n_rigidbonds
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.n_rigidbonds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":174
 * 
 *     property node_grid:
 *         def __set__(self, _node_grid):             # <<<<<<<<<<<<<<
 *             global node_grid
 *             if len(_node_grid) != 3:
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_9node_grid_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__node_grid); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_9node_grid_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__node_grid) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9node_grid___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((PyObject *)__pyx_v__node_grid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_9node_grid___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__node_grid) {
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":176
 *         def __set__(self, _node_grid):
 *             global node_grid
 *             if len(_node_grid) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v__node_grid); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":177
 *             global node_grid
 *             if len(_node_grid) != 3:
 *                 raise ValueError("node_grid must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":176
 *         def __set__(self, _node_grid):
 *             global node_grid
 *             if len(_node_grid) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):
 */
  }

  /* "espressomd/_system.pyx":178
 *             if len(_node_grid) != 3:
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "espressomd/_system.pyx":179
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i] = _node_grid[i]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__node_grid, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "espressomd/_system.pyx":180
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")             # <<<<<<<<<<<<<<
 *                 node_grid[i] = _node_grid[i]
 *             if _node_grid[0] * _node_grid[1] * _node_grid[2] != n_nodes:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "espressomd/_system.pyx":179
 *                 raise ValueError("node_grid must be of length 3")
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:             # <<<<<<<<<<<<<<
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i] = _node_grid[i]
 */
    }

    /* "espressomd/_system.pyx":181
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i] = _node_grid[i]             # <<<<<<<<<<<<<<
 *             if _node_grid[0] * _node_grid[1] * _node_grid[2] != n_nodes:
 *                 raise ValueError(
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v__node_grid, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (node_grid[__pyx_v_i]) = __pyx_t_6;
  }

  /* "espressomd/_system.pyx":182
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i] = _node_grid[i]
 *             if _node_grid[0] * _node_grid[1] * _node_grid[2] != n_nodes:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "node_grid does not fit n_nodes (" + str(n_nodes) + ")")
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v__node_grid, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__node_grid, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyNumber_Multiply(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__node_grid, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_7, __pyx_t_3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(n_nodes); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_5, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":184
 *             if _node_grid[0] * _node_grid[1] * _node_grid[2] != n_nodes:
 *                 raise ValueError(
 *                     "node_grid does not fit n_nodes (" + str(n_nodes) + ")")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 node_grid[i] = _node_grid[i]
 */
    __pyx_t_7 = __Pyx_PyInt_From_int(n_nodes); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_kp_s_node_grid_does_not_fit_n_nodes, __pyx_t_7); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_kp_s__3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "espressomd/_system.pyx":183
 *                 node_grid[i] = _node_grid[i]
 *             if _node_grid[0] * _node_grid[1] * _node_grid[2] != n_nodes:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "node_grid does not fit n_nodes (" + str(n_nodes) + ")")
 *             for i in range(3):
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":182
 *                     raise ValueError("node_grid must be > 0 in all directions")
 *                 node_grid[i] = _node_grid[i]
 *             if _node_grid[0] * _node_grid[1] * _node_grid[2] != n_nodes:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "node_grid does not fit n_nodes (" + str(n_nodes) + ")")
 */
  }

  /* "espressomd/_system.pyx":185
 *                 raise ValueError(
 *                     "node_grid does not fit n_nodes (" + str(n_nodes) + ")")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 node_grid[i] = _node_grid[i]
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 */
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "espressomd/_system.pyx":186
 *                     "node_grid does not fit n_nodes (" + str(n_nodes) + ")")
 *             for i in range(3):
 *                 node_grid[i] = _node_grid[i]             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 * 
 */
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v__node_grid, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    (node_grid[__pyx_v_i]) = __pyx_t_6;
  }

  /* "espressomd/_system.pyx":187
 *             for i in range(3):
 *                 node_grid[i] = _node_grid[i]
 *             mpi_bcast_parameter(FIELD_NODEGRID)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(FIELD_NODEGRID);

  /* "espressomd/_system.pyx":174
 * 
 *     property node_grid:
 *         def __set__(self, _node_grid):             # <<<<<<<<<<<<<<
 *             global node_grid
 *             if len(_node_grid) != 3:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("espressomd._system.System.node_grid.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":189
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([node_grid[0], node_grid[1], node_grid[2]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9node_grid_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9node_grid_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9node_grid_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9node_grid_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":190
 * 
 *         def __get__(self):
 *             return np.array([node_grid[0], node_grid[1], node_grid[2]])             # <<<<<<<<<<<<<<
 * 
 *     property nptiso_gamma0:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int((node_grid[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int((node_grid[1])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int((node_grid[2])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":189
 *             mpi_bcast_parameter(FIELD_NODEGRID)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return np.array([node_grid[0], node_grid[1], node_grid[2]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd._system.System.node_grid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":193
 * 
 *     property nptiso_gamma0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso_gamma0
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_13nptiso_gamma0_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_13nptiso_gamma0_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13nptiso_gamma0___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_13nptiso_gamma0___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":194
 *     property nptiso_gamma0:
 *         def __get__(self):
 *             return nptiso_gamma0             # <<<<<<<<<<<<<<
 * 
 *     property nptiso_gammav:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso_gamma0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":193
 * 
 *     property nptiso_gamma0:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso_gamma0
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.nptiso_gamma0.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":197
 * 
 *     property nptiso_gammav:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso_gammav
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_13nptiso_gammav_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_13nptiso_gammav_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13nptiso_gammav___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_13nptiso_gammav___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":198
 *     property nptiso_gammav:
 *         def __get__(self):
 *             return nptiso_gammav             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_ext:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso_gammav); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":197
 * 
 *     property nptiso_gammav:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso_gammav
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.nptiso_gammav.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":201
 * 
 *     property npt_p_ext:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_ext
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9npt_p_ext_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9npt_p_ext_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9npt_p_ext___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9npt_p_ext___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":202
 *     property npt_p_ext:
 *         def __get__(self):
 *             return nptiso.p_ext             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_inst:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_ext); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":201
 * 
 *     property npt_p_ext:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_ext
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.npt_p_ext.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":205
 * 
 *     property npt_p_inst:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_inst
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_10npt_p_inst_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_10npt_p_inst_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_10npt_p_inst___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_10npt_p_inst___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":206
 *     property npt_p_inst:
 *         def __get__(self):
 *             return nptiso.p_inst             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_inst_av:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_inst); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":205
 * 
 *     property npt_p_inst:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_inst
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.npt_p_inst.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":209
 * 
 *     property npt_p_inst_av:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_inst_av
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_13npt_p_inst_av_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_13npt_p_inst_av_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13npt_p_inst_av___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_13npt_p_inst_av___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":210
 *     property npt_p_inst_av:
 *         def __get__(self):
 *             return nptiso.p_inst_av             # <<<<<<<<<<<<<<
 * 
 *     property npt_piston:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_inst_av); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":209
 * 
 *     property npt_p_inst_av:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return nptiso.p_inst_av
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.npt_p_inst_av.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":213
 * 
 *     property npt_piston:
 *         def __set__(self, _npt_piston):             # <<<<<<<<<<<<<<
 *             global npt_piston
 *             if _npt_piston < 0:
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_10npt_piston_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_piston); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_10npt_piston_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_piston) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_10npt_piston___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((PyObject *)__pyx_v__npt_piston));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_10npt_piston___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__npt_piston) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":215
 *         def __set__(self, _npt_piston):
 *             global npt_piston
 *             if _npt_piston < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("npt_piston must be > 0")
 *             nptiso.piston = _npt_piston
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v__npt_piston, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":216
 *             global npt_piston
 *             if _npt_piston < 0:
 *                 raise ValueError("npt_piston must be > 0")             # <<<<<<<<<<<<<<
 *             nptiso.piston = _npt_piston
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":215
 *         def __set__(self, _npt_piston):
 *             global npt_piston
 *             if _npt_piston < 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("npt_piston must be > 0")
 *             nptiso.piston = _npt_piston
 */
  }

  /* "espressomd/_system.pyx":217
 *             if _npt_piston < 0:
 *                 raise ValueError("npt_piston must be > 0")
 *             nptiso.piston = _npt_piston             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 * 
 */
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v__npt_piston); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  nptiso.piston = __pyx_t_3;

  /* "espressomd/_system.pyx":218
 *                 raise ValueError("npt_piston must be > 0")
 *             nptiso.piston = _npt_piston
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(FIELD_NPTISO_PISTON);

  /* "espressomd/_system.pyx":213
 * 
 *     property npt_piston:
 *         def __set__(self, _npt_piston):             # <<<<<<<<<<<<<<
 *             global npt_piston
 *             if _npt_piston < 0:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.npt_piston.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":220
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global npt_piston
 *             return nptiso.piston
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_10npt_piston_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_10npt_piston_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_10npt_piston_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_10npt_piston_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":222
 *         def __get__(self):
 *             global npt_piston
 *             return nptiso.piston             # <<<<<<<<<<<<<<
 * 
 *     property npt_p_diff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.piston); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":220
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global npt_piston
 *             return nptiso.piston
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.npt_piston.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":225
 * 
 *     property npt_p_diff:
 *         def __set__(self, _npt_p_diff):             # <<<<<<<<<<<<<<
 *             global npt_p_diff
 *             nptiso.p_diff = _npt_p_diff
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_10npt_p_diff_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_p_diff); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_10npt_p_diff_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__npt_p_diff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_10npt_p_diff___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((PyObject *)__pyx_v__npt_p_diff));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_10npt_p_diff___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__npt_p_diff) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":227
 *         def __set__(self, _npt_p_diff):
 *             global npt_p_diff
 *             nptiso.p_diff = _npt_p_diff             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_NPTISO_PDIFF)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v__npt_p_diff); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  nptiso.p_diff = __pyx_t_1;

  /* "espressomd/_system.pyx":228
 *             global npt_p_diff
 *             nptiso.p_diff = _npt_p_diff
 *             mpi_bcast_parameter(FIELD_NPTISO_PDIFF)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(FIELD_NPTISO_PDIFF);

  /* "espressomd/_system.pyx":225
 * 
 *     property npt_p_diff:
 *         def __set__(self, _npt_p_diff):             # <<<<<<<<<<<<<<
 *             global npt_p_diff
 *             nptiso.p_diff = _npt_p_diff
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("espressomd._system.System.npt_p_diff.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":230
 *             mpi_bcast_parameter(FIELD_NPTISO_PDIFF)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global npt_p_diff
 *             return nptiso.p_diff
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_10npt_p_diff_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_10npt_p_diff_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_10npt_p_diff_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_10npt_p_diff_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":232
 *         def __get__(self):
 *             global npt_p_diff
 *             return nptiso.p_diff             # <<<<<<<<<<<<<<
 * 
 *     property periodicity:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(nptiso.p_diff); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":230
 *             mpi_bcast_parameter(FIELD_NPTISO_PDIFF)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global npt_p_diff
 *             return nptiso.p_diff
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.npt_p_diff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":235
 * 
 *     property periodicity:
 *         def __set__(self, _periodic):             # <<<<<<<<<<<<<<
 *             global periodic
 *             if len(_periodic) != 3:
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_11periodicity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__periodic); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_11periodicity_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__periodic) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_11periodicity___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((PyObject *)__pyx_v__periodic));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_11periodicity___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__periodic) {
  PyObject *__pyx_v_periodicity = NULL;
  long __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":237
 *         def __set__(self, _periodic):
 *             global periodic
 *             if len(_periodic) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "periodicity must be of length 3, got length " + str(len(_periodic)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v__periodic); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":239
 *             if len(_periodic) != 3:
 *                 raise ValueError(
 *                     "periodicity must be of length 3, got length " + str(len(_periodic)))             # <<<<<<<<<<<<<<
 *             periodicity = np.zeros(3)
 *             for i in range(3):
 */
    __pyx_t_1 = PyObject_Length(__pyx_v__periodic); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_kp_s_periodicity_must_be_of_length_3, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "espressomd/_system.pyx":238
 *             global periodic
 *             if len(_periodic) != 3:
 *                 raise ValueError(             # <<<<<<<<<<<<<<
 *                     "periodicity must be of length 3, got length " + str(len(_periodic)))
 *             periodicity = np.zeros(3)
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":237
 *         def __set__(self, _periodic):
 *             global periodic
 *             if len(_periodic) != 3:             # <<<<<<<<<<<<<<
 *                 raise ValueError(
 *                     "periodicity must be of length 3, got length " + str(len(_periodic)))
 */
  }

  /* "espressomd/_system.pyx":240
 *                 raise ValueError(
 *                     "periodicity must be of length 3, got length " + str(len(_periodic)))
 *             periodicity = np.zeros(3)             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_periodicity = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "espressomd/_system.pyx":241
 *                     "periodicity must be of length 3, got length " + str(len(_periodic)))
 *             periodicity = np.zeros(3)
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if _periodic[i] != 1:
 *                     raise ValueError(
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "espressomd/_system.pyx":242
 *             periodicity = np.zeros(3)
 *             for i in range(3):
 *                 if _periodic[i] != 1:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v__periodic, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "espressomd/_system.pyx":243
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 *             for i in range(3):
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "espressomd/_system.pyx":242
 *             periodicity = np.zeros(3)
 *             for i in range(3):
 *                 if _periodic[i] != 1:             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 */
    }
  }

  /* "espressomd/_system.pyx":245
 *                     raise ValueError(
 *                         "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 periodicity[i] = _periodic[i]
 *             periodic = 4 * _periodic[2] + 2 * _periodic[1] + _periodic[0]
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "espressomd/_system.pyx":246
 *                         "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 *             for i in range(3):
 *                 periodicity[i] = _periodic[i]             # <<<<<<<<<<<<<<
 *             periodic = 4 * _periodic[2] + 2 * _periodic[1] + _periodic[0]
 *             # first 3 bits of periodic determine the periodicity
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__periodic, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_periodicity, __pyx_v_i, __pyx_t_3, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "espressomd/_system.pyx":247
 *             for i in range(3):
 *                 periodicity[i] = _periodic[i]
 *             periodic = 4 * _periodic[2] + 2 * _periodic[1] + _periodic[0]             # <<<<<<<<<<<<<<
 *             # first 3 bits of periodic determine the periodicity
 *             # until we can handle contitional compilatio, periodic=7 is the
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__periodic, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyNumber_Multiply(__pyx_int_4, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v__periodic, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = PyNumber_Multiply(__pyx_int_2, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v__periodic, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  periodic = __pyx_t_7;

  /* "espressomd/_system.pyx":251
 *             # until we can handle contitional compilatio, periodic=7 is the
 *             # only value which makes sense
 *             mpi_bcast_parameter(FIELD_PERIODIC)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(FIELD_PERIODIC);

  /* "espressomd/_system.pyx":235
 * 
 *     property periodicity:
 *         def __set__(self, _periodic):             # <<<<<<<<<<<<<<
 *             global periodic
 *             if len(_periodic) != 3:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("espressomd._system.System.periodicity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_periodicity);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":253
 *             mpi_bcast_parameter(FIELD_PERIODIC)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global periodic
 *             periodicity = np.zeros(3)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_11periodicity_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_11periodicity_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_11periodicity_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_11periodicity_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_v_periodicity = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":255
 *         def __get__(self):
 *             global periodic
 *             periodicity = np.zeros(3)             # <<<<<<<<<<<<<<
 *             periodicity[0] = periodic % 2
 *             periodicity[1] = int(periodic / 2) % 2
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_periodicity = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "espressomd/_system.pyx":256
 *             global periodic
 *             periodicity = np.zeros(3)
 *             periodicity[0] = periodic % 2             # <<<<<<<<<<<<<<
 *             periodicity[1] = int(periodic / 2) % 2
 *             periodicity[2] = int(periodic / 4) % 2
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__Pyx_mod_long(periodic, 2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__Pyx_SetItemInt(__pyx_v_periodicity, 0, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/_system.pyx":257
 *             periodicity = np.zeros(3)
 *             periodicity[0] = periodic % 2
 *             periodicity[1] = int(periodic / 2) % 2             # <<<<<<<<<<<<<<
 *             periodicity[2] = int(periodic / 4) % 2
 *             return periodicity
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__Pyx_div_long(periodic, 2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_RemainderObjC(__pyx_t_1, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__Pyx_SetItemInt(__pyx_v_periodicity, 1, __pyx_t_2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":258
 *             periodicity[0] = periodic % 2
 *             periodicity[1] = int(periodic / 2) % 2
 *             periodicity[2] = int(periodic / 4) % 2             # <<<<<<<<<<<<<<
 *             return periodicity
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(__Pyx_div_long(periodic, 4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyInt_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_RemainderObjC(__pyx_t_2, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(__Pyx_SetItemInt(__pyx_v_periodicity, 2, __pyx_t_1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/_system.pyx":259
 *             periodicity[1] = int(periodic / 2) % 2
 *             periodicity[2] = int(periodic / 4) % 2
 *             return periodicity             # <<<<<<<<<<<<<<
 * 
 *     property skin:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_periodicity);
  __pyx_r = __pyx_v_periodicity;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":253
 *             mpi_bcast_parameter(FIELD_PERIODIC)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global periodic
 *             periodicity = np.zeros(3)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd._system.System.periodicity.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_periodicity);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":262
 * 
 *     property skin:
 *         def __set__(self, double _skin):             # <<<<<<<<<<<<<<
 *             if _skin <= 0:
 *                 raise ValueError("Skin must be >= 0")
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_4skin_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__skin); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_4skin_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__skin) {
  double __pyx_v__skin;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__skin); {
    __pyx_v__skin = __pyx_PyFloat_AsDouble(__pyx_arg__skin); if (unlikely((__pyx_v__skin == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd._system.System.skin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_4skin___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((double)__pyx_v__skin));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_4skin___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, double __pyx_v__skin) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":263
 *     property skin:
 *         def __set__(self, double _skin):
 *             if _skin <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Skin must be >= 0")
 *             global skin
 */
  __pyx_t_1 = ((__pyx_v__skin <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":264
 *         def __set__(self, double _skin):
 *             if _skin <= 0:
 *                 raise ValueError("Skin must be >= 0")             # <<<<<<<<<<<<<<
 *             global skin
 *             skin = _skin
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":263
 *     property skin:
 *         def __set__(self, double _skin):
 *             if _skin <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Skin must be >= 0")
 *             global skin
 */
  }

  /* "espressomd/_system.pyx":266
 *                 raise ValueError("Skin must be >= 0")
 *             global skin
 *             skin = _skin             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(29)
 *             integrate.skin_set = True
 */
  skin = __pyx_v__skin;

  /* "espressomd/_system.pyx":267
 *             global skin
 *             skin = _skin
 *             mpi_bcast_parameter(29)             # <<<<<<<<<<<<<<
 *             integrate.skin_set = True
 * 
 */
  mpi_bcast_parameter(29);

  /* "espressomd/_system.pyx":268
 *             skin = _skin
 *             mpi_bcast_parameter(29)
 *             integrate.skin_set = True             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  skin_set = 1;

  /* "espressomd/_system.pyx":262
 * 
 *     property skin:
 *         def __set__(self, double _skin):             # <<<<<<<<<<<<<<
 *             if _skin <= 0:
 *                 raise ValueError("Skin must be >= 0")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd._system.System.skin.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":270
 *             integrate.skin_set = True
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global skin
 *             return skin
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_4skin_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_4skin_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_4skin_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_4skin_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":272
 *         def __get__(self):
 *             global skin
 *             return skin             # <<<<<<<<<<<<<<
 * 
 *     property temperature:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(skin); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":270
 *             integrate.skin_set = True
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global skin
 *             return skin
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.skin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":275
 * 
 *     property temperature:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global temperature
 *             return temperature
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_11temperature_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_11temperature_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_11temperature___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_11temperature___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":277
 *         def __get__(self):
 *             global temperature
 *             return temperature             # <<<<<<<<<<<<<<
 * 
 *     property thermo_switch:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(temperature); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":275
 * 
 *     property temperature:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global temperature
 *             return temperature
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.temperature.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":280
 * 
 *     property thermo_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global thermo_switch
 *             return thermo_switch
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_13thermo_switch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_13thermo_switch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13thermo_switch___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_13thermo_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":282
 *         def __get__(self):
 *             global thermo_switch
 *             return thermo_switch             # <<<<<<<<<<<<<<
 * 
 *     property time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(thermo_switch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":280
 * 
 *     property thermo_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global thermo_switch
 *             return thermo_switch
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.thermo_switch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":285
 * 
 *     property time:
 *         def __set__(self, double _time):             # <<<<<<<<<<<<<<
 *             if _time <= 0:
 *                 raise ValueError("Simulation time must be >= 0")
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_4time_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_4time_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time) {
  double __pyx_v__time;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__time); {
    __pyx_v__time = __pyx_PyFloat_AsDouble(__pyx_arg__time); if (unlikely((__pyx_v__time == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 285; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd._system.System.time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_4time___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((double)__pyx_v__time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_4time___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, double __pyx_v__time) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":286
 *     property time:
 *         def __set__(self, double _time):
 *             if _time <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Simulation time must be >= 0")
 *             global sim_time
 */
  __pyx_t_1 = ((__pyx_v__time <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":287
 *         def __set__(self, double _time):
 *             if _time <= 0:
 *                 raise ValueError("Simulation time must be >= 0")             # <<<<<<<<<<<<<<
 *             global sim_time
 *             sim_time = _time
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":286
 *     property time:
 *         def __set__(self, double _time):
 *             if _time <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Simulation time must be >= 0")
 *             global sim_time
 */
  }

  /* "espressomd/_system.pyx":289
 *                 raise ValueError("Simulation time must be >= 0")
 *             global sim_time
 *             sim_time = _time             # <<<<<<<<<<<<<<
 *             mpi_bcast_parameter(FIELD_SIMTIME)
 * 
 */
  sim_time = __pyx_v__time;

  /* "espressomd/_system.pyx":290
 *             global sim_time
 *             sim_time = _time
 *             mpi_bcast_parameter(FIELD_SIMTIME)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_bcast_parameter(FIELD_SIMTIME);

  /* "espressomd/_system.pyx":285
 * 
 *     property time:
 *         def __set__(self, double _time):             # <<<<<<<<<<<<<<
 *             if _time <= 0:
 *                 raise ValueError("Simulation time must be >= 0")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd._system.System.time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":292
 *             mpi_bcast_parameter(FIELD_SIMTIME)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global sim_time
 *             return sim_time
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_4time_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_4time_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_4time_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_4time_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":294
 *         def __get__(self):
 *             global sim_time
 *             return sim_time             # <<<<<<<<<<<<<<
 * 
 *     property time_step:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(sim_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":292
 *             mpi_bcast_parameter(FIELD_SIMTIME)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global sim_time
 *             return sim_time
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":297
 * 
 *     property time_step:
 *         def __set__(self, double _time_step):             # <<<<<<<<<<<<<<
 *             IF LB:
 *                 global lbpar
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_9time_step_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time_step); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_9time_step_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__time_step) {
  double __pyx_v__time_step;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__time_step); {
    __pyx_v__time_step = __pyx_PyFloat_AsDouble(__pyx_arg__time_step); if (unlikely((__pyx_v__time_step == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd._system.System.time_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9time_step___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((double)__pyx_v__time_step));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_9time_step___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, double __pyx_v__time_step) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":302
 *             IF LB_GPU:
 *                 global lbpar_gpu
 *             if _time_step <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Time Step must be positive")
 *             IF LB:
 */
  __pyx_t_1 = ((__pyx_v__time_step <= 0.0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":303
 *                 global lbpar_gpu
 *             if _time_step <= 0:
 *                 raise ValueError("Time Step must be positive")             # <<<<<<<<<<<<<<
 *             IF LB:
 *                 if lbpar.tau >= 0.0 and _time_step > lbpar.tau:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":302
 *             IF LB_GPU:
 *                 global lbpar_gpu
 *             if _time_step <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Time Step must be positive")
 *             IF LB:
 */
  }

  /* "espressomd/_system.pyx":312
 *                     raise ValueError(
 *                         "Time Step must be > LB_time_step (" + str(lbpar_gpu.tau) + ")")
 *             mpi_set_time_step(_time_step)             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  mpi_set_time_step(__pyx_v__time_step);

  /* "espressomd/_system.pyx":297
 * 
 *     property time_step:
 *         def __set__(self, double _time_step):             # <<<<<<<<<<<<<<
 *             IF LB:
 *                 global lbpar
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("espressomd._system.System.time_step.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":314
 *             mpi_set_time_step(_time_step)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global time_step
 *             return time_step
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_9time_step_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_9time_step_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_9time_step_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_9time_step_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":316
 *         def __get__(self):
 *             global time_step
 *             return time_step             # <<<<<<<<<<<<<<
 * 
 *     property timings:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(time_step); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":314
 *             mpi_set_time_step(_time_step)
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global time_step
 *             return time_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.time_step.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":319
 * 
 *     property timings:
 *         def __set__(self, int _timings):             # <<<<<<<<<<<<<<
 *             global timing_samples
 *             if _timings <= 0:
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_7timings_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__timings); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_7timings_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg__timings) {
  int __pyx_v__timings;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg__timings); {
    __pyx_v__timings = __Pyx_PyInt_As_int(__pyx_arg__timings); if (unlikely((__pyx_v__timings == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd._system.System.timings.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_7timings___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((int)__pyx_v__timings));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_7timings___set__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, int __pyx_v__timings) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":321
 *         def __set__(self, int _timings):
 *             global timing_samples
 *             if _timings <= 0:             # <<<<<<<<<<<<<<
 *                 timing_samples = 0
 *             else:
 */
  __pyx_t_1 = ((__pyx_v__timings <= 0) != 0);
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":322
 *             global timing_samples
 *             if _timings <= 0:
 *                 timing_samples = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 timing_samples = _timings
 */
    timing_samples = 0;

    /* "espressomd/_system.pyx":321
 *         def __set__(self, int _timings):
 *             global timing_samples
 *             if _timings <= 0:             # <<<<<<<<<<<<<<
 *                 timing_samples = 0
 *             else:
 */
    goto __pyx_L3;
  }

  /* "espressomd/_system.pyx":324
 *                 timing_samples = 0
 *             else:
 *                 timing_samples = _timings             # <<<<<<<<<<<<<<
 * 
 *         def __get__(self):
 */
  /*else*/ {
    timing_samples = __pyx_v__timings;
  }
  __pyx_L3:;

  /* "espressomd/_system.pyx":319
 * 
 *     property timings:
 *         def __set__(self, int _timings):             # <<<<<<<<<<<<<<
 *             global timing_samples
 *             if _timings <= 0:
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":326
 *                 timing_samples = _timings
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global timing_samples
 *             return timing_samples
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_7timings_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_7timings_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_7timings_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_7timings_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":328
 *         def __get__(self):
 *             global timing_samples
 *             return timing_samples             # <<<<<<<<<<<<<<
 * 
 *     property transfer_rate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(timing_samples); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":326
 *                 timing_samples = _timings
 * 
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global timing_samples
 *             return timing_samples
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.timings.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":331
 * 
 *     property transfer_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global transfer_rate
 *             return transfer_rate
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_13transfer_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_13transfer_rate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_13transfer_rate___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_13transfer_rate___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":333
 *         def __get__(self):
 *             global transfer_rate
 *             return transfer_rate             # <<<<<<<<<<<<<<
 * 
 *     property max_cut_nonbonded:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(transfer_rate); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":331
 * 
 *     property transfer_rate:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global transfer_rate
 *             return transfer_rate
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.transfer_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":336
 * 
 *     property max_cut_nonbonded:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global max_cut_nonbonded
 *             return max_cut_nonbonded
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_17max_cut_nonbonded_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_17max_cut_nonbonded_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_17max_cut_nonbonded___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_17max_cut_nonbonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":338
 *         def __get__(self):
 *             global max_cut_nonbonded
 *             return max_cut_nonbonded             # <<<<<<<<<<<<<<
 * 
 *     property verlet_reuse:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_cut_nonbonded); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":336
 * 
 *     property max_cut_nonbonded:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global max_cut_nonbonded
 *             return max_cut_nonbonded
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.max_cut_nonbonded.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":341
 * 
 *     property verlet_reuse:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global verlet_reuse
 *             return verlet_reuse
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_12verlet_reuse_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_12verlet_reuse_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_12verlet_reuse___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_12verlet_reuse___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":343
 *         def __get__(self):
 *             global verlet_reuse
 *             return verlet_reuse             # <<<<<<<<<<<<<<
 * 
 *     property lattice_switch:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(verlet_reuse); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":341
 * 
 *     property verlet_reuse:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global verlet_reuse
 *             return verlet_reuse
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.verlet_reuse.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":346
 * 
 *     property lattice_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global lattice_switch
 *             return lattice_switch
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_14lattice_switch_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_14lattice_switch_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_14lattice_switch___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_14lattice_switch___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":348
 *         def __get__(self):
 *             global lattice_switch
 *             return lattice_switch             # <<<<<<<<<<<<<<
 * 
 *     property dpd_tgamma:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(lattice_switch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":346
 * 
 *     property lattice_switch:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global lattice_switch
 *             return lattice_switch
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.lattice_switch.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":351
 * 
 *     property dpd_tgamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_tgamma
 *             return dpd_tgamma
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_10dpd_tgamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_10dpd_tgamma_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_10dpd_tgamma___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_10dpd_tgamma___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":353
 *         def __get__(self):
 *             global dpd_tgamma
 *             return dpd_tgamma             # <<<<<<<<<<<<<<
 * 
 *     property dpd_tr_cut:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_tgamma); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 353; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":351
 * 
 *     property dpd_tgamma:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_tgamma
 *             return dpd_tgamma
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.dpd_tgamma.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":356
 * 
 *     property dpd_tr_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_tr_cut
 *             return dpd_tr_cut
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_10dpd_tr_cut_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_10dpd_tr_cut_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_10dpd_tr_cut___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_10dpd_tr_cut___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":358
 *         def __get__(self):
 *             global dpd_tr_cut
 *             return dpd_tr_cut             # <<<<<<<<<<<<<<
 * 
 *     property dpd_twf:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(dpd_tr_cut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":356
 * 
 *     property dpd_tr_cut:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_tr_cut
 *             return dpd_tr_cut
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.dpd_tr_cut.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":361
 * 
 *     property dpd_twf:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_twf
 *             return dpd_twf
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_7dpd_twf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_7dpd_twf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_7dpd_twf___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_7dpd_twf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":363
 *         def __get__(self):
 *             global dpd_twf
 *             return dpd_twf             # <<<<<<<<<<<<<<
 * 
 *     property dpd_wf:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(dpd_twf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":361
 * 
 *     property dpd_twf:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_twf
 *             return dpd_twf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.dpd_twf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":366
 * 
 *     property dpd_wf:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_wf
 *             return dpd_wf
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_6dpd_wf_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_6dpd_wf_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_6dpd_wf___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_6dpd_wf___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":368
 *         def __get__(self):
 *             global dpd_wf
 *             return dpd_wf             # <<<<<<<<<<<<<<
 * 
 *     property adress_vars:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(dpd_wf); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":366
 * 
 *     property dpd_wf:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global dpd_wf
 *             return dpd_wf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.dpd_wf.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":371
 * 
 *     property adress_vars:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global adress_vars
 *             return np.array([
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_11adress_vars_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_11adress_vars_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_11adress_vars___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_11adress_vars___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":373
 *         def __get__(self):
 *             global adress_vars
 *             return np.array([             # <<<<<<<<<<<<<<
 *                 adress_vars[0],
 *                 adress_vars[1],
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":374
 *             global adress_vars
 *             return np.array([
 *                 adress_vars[0],             # <<<<<<<<<<<<<<
 *                 adress_vars[1],
 *                 adress_vars[2],
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_adress_vars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":375
 *             return np.array([
 *                 adress_vars[0],
 *                 adress_vars[1],             # <<<<<<<<<<<<<<
 *                 adress_vars[2],
 *                 adress_vars[3],
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_adress_vars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":376
 *                 adress_vars[0],
 *                 adress_vars[1],
 *                 adress_vars[2],             # <<<<<<<<<<<<<<
 *                 adress_vars[3],
 *                 adress_vars[4],
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_adress_vars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":377
 *                 adress_vars[1],
 *                 adress_vars[2],
 *                 adress_vars[3],             # <<<<<<<<<<<<<<
 *                 adress_vars[4],
 *                 adress_vars[5],
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_adress_vars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_2, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":378
 *                 adress_vars[2],
 *                 adress_vars[3],
 *                 adress_vars[4],             # <<<<<<<<<<<<<<
 *                 adress_vars[5],
 *                 adress_vars[6]
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_adress_vars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_2, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":379
 *                 adress_vars[3],
 *                 adress_vars[4],
 *                 adress_vars[5],             # <<<<<<<<<<<<<<
 *                 adress_vars[6]
 *             ])
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_adress_vars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_2, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":380
 *                 adress_vars[4],
 *                 adress_vars[5],
 *                 adress_vars[6]             # <<<<<<<<<<<<<<
 *             ])
 * 
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_adress_vars); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_2, 6, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":373
 *         def __get__(self):
 *             global adress_vars
 *             return np.array([             # <<<<<<<<<<<<<<
 *                 adress_vars[0],
 *                 adress_vars[1],
 */
  __pyx_t_2 = PyList_New(7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_t_10);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":371
 * 
 *     property adress_vars:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global adress_vars
 *             return np.array([
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("espressomd._system.System.adress_vars.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":384
 * 
 *     property max_cut_bonded:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global max_cut_bonded
 *             return max_cut_bonded
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_14max_cut_bonded_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_14max_cut_bonded_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_14max_cut_bonded___get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_14max_cut_bonded___get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":386
 *         def __get__(self):
 *             global max_cut_bonded
 *             return max_cut_bonded             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(max_cut_bonded); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":384
 * 
 *     property max_cut_bonded:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             global max_cut_bonded
 *             return max_cut_bonded
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.max_cut_bonded.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":390
 * 
 *     property seed:
 *             def __set__(self, _seed):             # <<<<<<<<<<<<<<
 *                 cdef vector[int] seed_array
 *                 global __seed
 */

/* Python wrapper */
static int __pyx_pw_10espressomd_7_system_6System_4seed_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__seed); /*proto*/
static int __pyx_pw_10espressomd_7_system_6System_4seed_1__set__(PyObject *__pyx_v_self, PyObject *__pyx_v__seed) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_4seed___set__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self), ((PyObject *)__pyx_v__seed));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10espressomd_7_system_6System_4seed___set__(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self, PyObject *__pyx_v__seed) {
  std::vector<int>  __pyx_v_seed_array;
  Py_ssize_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "espressomd/_system.pyx":393
 *                 cdef vector[int] seed_array
 *                 global __seed
 *                 __seed=_seed             # <<<<<<<<<<<<<<
 *                 if(isinstance(_seed,int) and self.n_nodes==1):
 *                     seed_array[0]=int(_seed)
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_seed, __pyx_v__seed) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "espressomd/_system.pyx":394
 *                 global __seed
 *                 __seed=_seed
 *                 if(isinstance(_seed,int) and self.n_nodes==1):             # <<<<<<<<<<<<<<
 *                     seed_array[0]=int(_seed)
 *                     mpi_random_seed(0,seed_array)
 */
  __pyx_t_2 = PyInt_Check(__pyx_v__seed); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_nodes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":395
 *                 __seed=_seed
 *                 if(isinstance(_seed,int) and self.n_nodes==1):
 *                     seed_array[0]=int(_seed)             # <<<<<<<<<<<<<<
 *                     mpi_random_seed(0,seed_array)
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):
 */
    __pyx_t_5 = PyNumber_Int(__pyx_v__seed); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_seed_array[0]) = __pyx_t_6;

    /* "espressomd/_system.pyx":396
 *                 if(isinstance(_seed,int) and self.n_nodes==1):
 *                     seed_array[0]=int(_seed)
 *                     mpi_random_seed(0,seed_array)             # <<<<<<<<<<<<<<
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):
 *                     if(len(_seed)<self.n_nodes or len(_seed)>self.n_nodes):
 */
    mpi_random_seed(0, __pyx_v_seed_array);

    /* "espressomd/_system.pyx":394
 *                 global __seed
 *                 __seed=_seed
 *                 if(isinstance(_seed,int) and self.n_nodes==1):             # <<<<<<<<<<<<<<
 *                     seed_array[0]=int(_seed)
 *                     mpi_random_seed(0,seed_array)
 */
    goto __pyx_L3;
  }

  /* "espressomd/_system.pyx":397
 *                     seed_array[0]=int(_seed)
 *                     mpi_random_seed(0,seed_array)
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):             # <<<<<<<<<<<<<<
 *                     if(len(_seed)<self.n_nodes or len(_seed)>self.n_nodes):
 *                         raise ValueError("The list needs to contain one seed value per node")
 */
  __pyx_t_3 = PyList_Check(__pyx_v__seed); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v__seed)), __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_1) {

    /* "espressomd/_system.pyx":398
 *                     mpi_random_seed(0,seed_array)
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):
 *                     if(len(_seed)<self.n_nodes or len(_seed)>self.n_nodes):             # <<<<<<<<<<<<<<
 *                         raise ValueError("The list needs to contain one seed value per node")
 * 
 */
    __pyx_t_7 = PyObject_Length(__pyx_v__seed); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_nodes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_7 = PyObject_Length(__pyx_v__seed); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_nodes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_8, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_1) {

      /* "espressomd/_system.pyx":399
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):
 *                     if(len(_seed)<self.n_nodes or len(_seed)>self.n_nodes):
 *                         raise ValueError("The list needs to contain one seed value per node")             # <<<<<<<<<<<<<<
 * 
 *                     for i in range(len(_seed)):
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

      /* "espressomd/_system.pyx":398
 *                     mpi_random_seed(0,seed_array)
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):
 *                     if(len(_seed)<self.n_nodes or len(_seed)>self.n_nodes):             # <<<<<<<<<<<<<<
 *                         raise ValueError("The list needs to contain one seed value per node")
 * 
 */
    }

    /* "espressomd/_system.pyx":401
 *                         raise ValueError("The list needs to contain one seed value per node")
 * 
 *                     for i in range(len(_seed)):             # <<<<<<<<<<<<<<
 *                         seed_array[i]=int(_seed[i])
 * 
 */
    __pyx_t_7 = PyObject_Length(__pyx_v__seed); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_7; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "espressomd/_system.pyx":402
 * 
 *                     for i in range(len(_seed)):
 *                         seed_array[i]=int(_seed[i])             # <<<<<<<<<<<<<<
 * 
 *                     mpi_random_seed(self.n_nodes,seed_array)
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v__seed, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      (__pyx_v_seed_array[__pyx_v_i]) = __pyx_t_6;
    }

    /* "espressomd/_system.pyx":404
 *                         seed_array[i]=int(_seed[i])
 * 
 *                     mpi_random_seed(self.n_nodes,seed_array)             # <<<<<<<<<<<<<<
 *                 else:
 *                         raise ValueError("The seed has to be an integer or a list of integers with one integer per node")
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_n_nodes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    mpi_random_seed(__pyx_t_6, __pyx_v_seed_array);

    /* "espressomd/_system.pyx":397
 *                     seed_array[0]=int(_seed)
 *                     mpi_random_seed(0,seed_array)
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):             # <<<<<<<<<<<<<<
 *                     if(len(_seed)<self.n_nodes or len(_seed)>self.n_nodes):
 *                         raise ValueError("The list needs to contain one seed value per node")
 */
    goto __pyx_L3;
  }

  /* "espressomd/_system.pyx":406
 *                     mpi_random_seed(self.n_nodes,seed_array)
 *                 else:
 *                         raise ValueError("The seed has to be an integer or a list of integers with one integer per node")             # <<<<<<<<<<<<<<
 * 
 *             def __get__(self):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "espressomd/_system.pyx":390
 * 
 *     property seed:
 *             def __set__(self, _seed):             # <<<<<<<<<<<<<<
 *                 cdef vector[int] seed_array
 *                 global __seed
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("espressomd._system.System.seed.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":408
 *                         raise ValueError("The seed has to be an integer or a list of integers with one integer per node")
 * 
 *             def __get__(self):             # <<<<<<<<<<<<<<
 *                 global __seed
 *                 return __seed
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_4seed_3__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10espressomd_7_system_6System_4seed_3__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_4seed_2__get__(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_4seed_2__get__(CYTHON_UNUSED struct __pyx_obj_10espressomd_7_system_System *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "espressomd/_system.pyx":410
 *             def __get__(self):
 *                 global __seed
 *                 return __seed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_seed); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "espressomd/_system.pyx":408
 *                         raise ValueError("The seed has to be an integer or a list of integers with one integer per node")
 * 
 *             def __get__(self):             # <<<<<<<<<<<<<<
 *                 global __seed
 *                 return __seed
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("espressomd._system.System.seed.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "espressomd/_system.pyx":413
 * 
 * 
 *     def change_volume_and_rescale_particles(d_new, dir="xyz"):             # <<<<<<<<<<<<<<
 *         """Change box size and rescale particle coordinates
 *            change_volume_and_rescale_particles(d_new, dir="xyz")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10espressomd_7_system_6System_7change_volume_and_rescale_particles(PyObject *__pyx_v_d_new, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10espressomd_7_system_6System_6change_volume_and_rescale_particles[] = "Change box size and rescale particle coordinates\n           change_volume_and_rescale_particles(d_new, dir=\"xyz\")\n           d_new: new length, dir=coordinate tow work on, \"xyz\" for isotropic\n        ";
static PyObject *__pyx_pw_10espressomd_7_system_6System_7change_volume_and_rescale_particles(PyObject *__pyx_v_d_new, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_dir = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("change_volume_and_rescale_particles (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_dir,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_xyz);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_dir);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "change_volume_and_rescale_particles") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dir = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("change_volume_and_rescale_particles", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("espressomd._system.System.change_volume_and_rescale_particles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10espressomd_7_system_6System_6change_volume_and_rescale_particles(((struct __pyx_obj_10espressomd_7_system_System *)__pyx_v_d_new), __pyx_v_dir);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10espressomd_7_system_6System_6change_volume_and_rescale_particles(struct __pyx_obj_10espressomd_7_system_System *__pyx_v_d_new, PyObject *__pyx_v_dir) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("change_volume_and_rescale_particles", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_d_new);

  /* "espressomd/_system.pyx":418
 *            d_new: new length, dir=coordinate tow work on, "xyz" for isotropic
 *         """
 *         if d_new < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("No negative lengths")
 *         if dir == "xyz":
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)__pyx_v_d_new), __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":419
 *         """
 *         if d_new < 0:
 *             raise ValueError("No negative lengths")             # <<<<<<<<<<<<<<
 *         if dir == "xyz":
 *             d_new = d_new**(1. / 3.)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "espressomd/_system.pyx":418
 *            d_new: new length, dir=coordinate tow work on, "xyz" for isotropic
 *         """
 *         if d_new < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("No negative lengths")
 *         if dir == "xyz":
 */
  }

  /* "espressomd/_system.pyx":420
 *         if d_new < 0:
 *             raise ValueError("No negative lengths")
 *         if dir == "xyz":             # <<<<<<<<<<<<<<
 *             d_new = d_new**(1. / 3.)
 *             rescale_boxl(3, d_new)
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_dir, __pyx_n_s_xyz, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":421
 *             raise ValueError("No negative lengths")
 *         if dir == "xyz":
 *             d_new = d_new**(1. / 3.)             # <<<<<<<<<<<<<<
 *             rescale_boxl(3, d_new)
 *         elif dir == "x":
 */
    __pyx_t_1 = PyFloat_FromDouble((1. / 3.)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Power(((PyObject *)__pyx_v_d_new), __pyx_t_1, Py_None); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_10espressomd_7_system_System))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF_SET(__pyx_v_d_new, ((struct __pyx_obj_10espressomd_7_system_System *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "espressomd/_system.pyx":422
 *         if dir == "xyz":
 *             d_new = d_new**(1. / 3.)
 *             rescale_boxl(3, d_new)             # <<<<<<<<<<<<<<
 *         elif dir == "x":
 *             rescale_boxl(0, d_new)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(((PyObject *)__pyx_v_d_new)); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    rescale_boxl(3, __pyx_t_4);

    /* "espressomd/_system.pyx":420
 *         if d_new < 0:
 *             raise ValueError("No negative lengths")
 *         if dir == "xyz":             # <<<<<<<<<<<<<<
 *             d_new = d_new**(1. / 3.)
 *             rescale_boxl(3, d_new)
 */
    goto __pyx_L4;
  }

  /* "espressomd/_system.pyx":423
 *             d_new = d_new**(1. / 3.)
 *             rescale_boxl(3, d_new)
 *         elif dir == "x":             # <<<<<<<<<<<<<<
 *             rescale_boxl(0, d_new)
 *         elif dir == "y":
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_dir, __pyx_n_s_x, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":424
 *             rescale_boxl(3, d_new)
 *         elif dir == "x":
 *             rescale_boxl(0, d_new)             # <<<<<<<<<<<<<<
 *         elif dir == "y":
 *             rescale_boxl(1, d_new)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(((PyObject *)__pyx_v_d_new)); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    rescale_boxl(0, __pyx_t_4);

    /* "espressomd/_system.pyx":423
 *             d_new = d_new**(1. / 3.)
 *             rescale_boxl(3, d_new)
 *         elif dir == "x":             # <<<<<<<<<<<<<<
 *             rescale_boxl(0, d_new)
 *         elif dir == "y":
 */
    goto __pyx_L4;
  }

  /* "espressomd/_system.pyx":425
 *         elif dir == "x":
 *             rescale_boxl(0, d_new)
 *         elif dir == "y":             # <<<<<<<<<<<<<<
 *             rescale_boxl(1, d_new)
 *         elif dir == "z":
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_dir, __pyx_n_s_y, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":426
 *             rescale_boxl(0, d_new)
 *         elif dir == "y":
 *             rescale_boxl(1, d_new)             # <<<<<<<<<<<<<<
 *         elif dir == "z":
 *             rescale_boxl(2, d_new)
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(((PyObject *)__pyx_v_d_new)); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    rescale_boxl(1, __pyx_t_4);

    /* "espressomd/_system.pyx":425
 *         elif dir == "x":
 *             rescale_boxl(0, d_new)
 *         elif dir == "y":             # <<<<<<<<<<<<<<
 *             rescale_boxl(1, d_new)
 *         elif dir == "z":
 */
    goto __pyx_L4;
  }

  /* "espressomd/_system.pyx":427
 *         elif dir == "y":
 *             rescale_boxl(1, d_new)
 *         elif dir == "z":             # <<<<<<<<<<<<<<
 *             rescale_boxl(2, d_new)
 *         else:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_dir, __pyx_n_s_z, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_2) {

    /* "espressomd/_system.pyx":428
 *             rescale_boxl(1, d_new)
 *         elif dir == "z":
 *             rescale_boxl(2, d_new)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError(
 */
    __pyx_t_4 = __pyx_PyFloat_AsDouble(((PyObject *)__pyx_v_d_new)); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    rescale_boxl(2, __pyx_t_4);

    /* "espressomd/_system.pyx":427
 *         elif dir == "y":
 *             rescale_boxl(1, d_new)
 *         elif dir == "z":             # <<<<<<<<<<<<<<
 *             rescale_boxl(2, d_new)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "espressomd/_system.pyx":430
 *             rescale_boxl(2, d_new)
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 'Usage: changeVolume { <V_new> | <L_new> { "x" | "y" | "z" | "xyz" } }')
 * 
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L4:;

  /* "espressomd/_system.pyx":413
 * 
 * 
 *     def change_volume_and_rescale_particles(d_new, dir="xyz"):             # <<<<<<<<<<<<<<
 *         """Change box size and rescale particle coordinates
 *            change_volume_and_rescale_particles(d_new, dir="xyz")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("espressomd._system.System.change_volume_and_rescale_particles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_d_new);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_10espressomd_7_system_System(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_10espressomd_7_system_System(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_box_l(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_5box_l_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_box_l(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_5box_l_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_cell_grid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9cell_grid_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_cell_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9cell_size_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_dpd_gamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9dpd_gamma_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_dpd_r_cut(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9dpd_r_cut_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_gamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_5gamma_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_integ_switch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_12integ_switch_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_local_box_l(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_11local_box_l_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_max_cut(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_7max_cut_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_max_num_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_13max_num_cells_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_max_num_cells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_13max_num_cells_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_min_num_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_13min_num_cells_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_min_num_cells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_13min_num_cells_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_max_part(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_8max_part_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_max_range(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9max_range_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_max_skin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_8max_skin_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_n_layers(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_8n_layers_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_n_nodes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_7n_nodes_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_n_part(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_6n_part_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_n_part_types(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_12n_part_types_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_n_rigidbonds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_12n_rigidbonds_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_node_grid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9node_grid_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_node_grid(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_9node_grid_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_nptiso_gamma0(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_13nptiso_gamma0_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_nptiso_gammav(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_13nptiso_gammav_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_npt_p_ext(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9npt_p_ext_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_npt_p_inst(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_10npt_p_inst_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_npt_p_inst_av(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_13npt_p_inst_av_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_npt_piston(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_10npt_piston_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_npt_piston(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_10npt_piston_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_npt_p_diff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_10npt_p_diff_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_npt_p_diff(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_10npt_p_diff_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_periodicity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_11periodicity_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_periodicity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_11periodicity_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_skin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_4skin_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_skin(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_4skin_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_temperature(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_11temperature_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_thermo_switch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_13thermo_switch_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_4time_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_4time_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_time_step(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_9time_step_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_time_step(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_9time_step_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_timings(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_7timings_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_timings(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_7timings_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_transfer_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_13transfer_rate_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_max_cut_nonbonded(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_17max_cut_nonbonded_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_verlet_reuse(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_12verlet_reuse_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_lattice_switch(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_14lattice_switch_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_dpd_tgamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_10dpd_tgamma_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_dpd_tr_cut(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_10dpd_tr_cut_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_dpd_twf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_7dpd_twf_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_dpd_wf(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_6dpd_wf_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_adress_vars(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_11adress_vars_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_max_cut_bonded(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_14max_cut_bonded_1__get__(o);
}

static PyObject *__pyx_getprop_10espressomd_7_system_6System_seed(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10espressomd_7_system_6System_4seed_3__get__(o);
}

static int __pyx_setprop_10espressomd_7_system_6System_seed(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10espressomd_7_system_6System_4seed_1__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_10espressomd_7_system_System[] = {
  {"__getstate__", (PyCFunction)__pyx_pw_10espressomd_7_system_6System_3__getstate__, METH_NOARGS, 0},
  {"__setstate__", (PyCFunction)__pyx_pw_10espressomd_7_system_6System_5__setstate__, METH_O, 0},
  {"change_volume_and_rescale_particles", (PyCFunction)__pyx_pw_10espressomd_7_system_6System_7change_volume_and_rescale_particles, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10espressomd_7_system_6System_6change_volume_and_rescale_particles},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10espressomd_7_system_System[] = {
  {(char *)"box_l", __pyx_getprop_10espressomd_7_system_6System_box_l, __pyx_setprop_10espressomd_7_system_6System_box_l, 0, 0},
  {(char *)"cell_grid", __pyx_getprop_10espressomd_7_system_6System_cell_grid, 0, 0, 0},
  {(char *)"cell_size", __pyx_getprop_10espressomd_7_system_6System_cell_size, 0, 0, 0},
  {(char *)"dpd_gamma", __pyx_getprop_10espressomd_7_system_6System_dpd_gamma, 0, 0, 0},
  {(char *)"dpd_r_cut", __pyx_getprop_10espressomd_7_system_6System_dpd_r_cut, 0, 0, 0},
  {(char *)"gamma", __pyx_getprop_10espressomd_7_system_6System_gamma, 0, 0, 0},
  {(char *)"integ_switch", __pyx_getprop_10espressomd_7_system_6System_integ_switch, 0, 0, 0},
  {(char *)"local_box_l", __pyx_getprop_10espressomd_7_system_6System_local_box_l, 0, 0, 0},
  {(char *)"max_cut", __pyx_getprop_10espressomd_7_system_6System_max_cut, 0, 0, 0},
  {(char *)"max_num_cells", __pyx_getprop_10espressomd_7_system_6System_max_num_cells, __pyx_setprop_10espressomd_7_system_6System_max_num_cells, 0, 0},
  {(char *)"min_num_cells", __pyx_getprop_10espressomd_7_system_6System_min_num_cells, __pyx_setprop_10espressomd_7_system_6System_min_num_cells, 0, 0},
  {(char *)"max_part", __pyx_getprop_10espressomd_7_system_6System_max_part, 0, 0, 0},
  {(char *)"max_range", __pyx_getprop_10espressomd_7_system_6System_max_range, 0, 0, 0},
  {(char *)"max_skin", __pyx_getprop_10espressomd_7_system_6System_max_skin, 0, 0, 0},
  {(char *)"n_layers", __pyx_getprop_10espressomd_7_system_6System_n_layers, 0, 0, 0},
  {(char *)"n_nodes", __pyx_getprop_10espressomd_7_system_6System_n_nodes, 0, 0, 0},
  {(char *)"n_part", __pyx_getprop_10espressomd_7_system_6System_n_part, 0, 0, 0},
  {(char *)"n_part_types", __pyx_getprop_10espressomd_7_system_6System_n_part_types, 0, 0, 0},
  {(char *)"n_rigidbonds", __pyx_getprop_10espressomd_7_system_6System_n_rigidbonds, 0, 0, 0},
  {(char *)"node_grid", __pyx_getprop_10espressomd_7_system_6System_node_grid, __pyx_setprop_10espressomd_7_system_6System_node_grid, 0, 0},
  {(char *)"nptiso_gamma0", __pyx_getprop_10espressomd_7_system_6System_nptiso_gamma0, 0, 0, 0},
  {(char *)"nptiso_gammav", __pyx_getprop_10espressomd_7_system_6System_nptiso_gammav, 0, 0, 0},
  {(char *)"npt_p_ext", __pyx_getprop_10espressomd_7_system_6System_npt_p_ext, 0, 0, 0},
  {(char *)"npt_p_inst", __pyx_getprop_10espressomd_7_system_6System_npt_p_inst, 0, 0, 0},
  {(char *)"npt_p_inst_av", __pyx_getprop_10espressomd_7_system_6System_npt_p_inst_av, 0, 0, 0},
  {(char *)"npt_piston", __pyx_getprop_10espressomd_7_system_6System_npt_piston, __pyx_setprop_10espressomd_7_system_6System_npt_piston, 0, 0},
  {(char *)"npt_p_diff", __pyx_getprop_10espressomd_7_system_6System_npt_p_diff, __pyx_setprop_10espressomd_7_system_6System_npt_p_diff, 0, 0},
  {(char *)"periodicity", __pyx_getprop_10espressomd_7_system_6System_periodicity, __pyx_setprop_10espressomd_7_system_6System_periodicity, 0, 0},
  {(char *)"skin", __pyx_getprop_10espressomd_7_system_6System_skin, __pyx_setprop_10espressomd_7_system_6System_skin, 0, 0},
  {(char *)"temperature", __pyx_getprop_10espressomd_7_system_6System_temperature, 0, 0, 0},
  {(char *)"thermo_switch", __pyx_getprop_10espressomd_7_system_6System_thermo_switch, 0, 0, 0},
  {(char *)"time", __pyx_getprop_10espressomd_7_system_6System_time, __pyx_setprop_10espressomd_7_system_6System_time, 0, 0},
  {(char *)"time_step", __pyx_getprop_10espressomd_7_system_6System_time_step, __pyx_setprop_10espressomd_7_system_6System_time_step, 0, 0},
  {(char *)"timings", __pyx_getprop_10espressomd_7_system_6System_timings, __pyx_setprop_10espressomd_7_system_6System_timings, 0, 0},
  {(char *)"transfer_rate", __pyx_getprop_10espressomd_7_system_6System_transfer_rate, 0, 0, 0},
  {(char *)"max_cut_nonbonded", __pyx_getprop_10espressomd_7_system_6System_max_cut_nonbonded, 0, 0, 0},
  {(char *)"verlet_reuse", __pyx_getprop_10espressomd_7_system_6System_verlet_reuse, 0, 0, 0},
  {(char *)"lattice_switch", __pyx_getprop_10espressomd_7_system_6System_lattice_switch, 0, 0, 0},
  {(char *)"dpd_tgamma", __pyx_getprop_10espressomd_7_system_6System_dpd_tgamma, 0, 0, 0},
  {(char *)"dpd_tr_cut", __pyx_getprop_10espressomd_7_system_6System_dpd_tr_cut, 0, 0, 0},
  {(char *)"dpd_twf", __pyx_getprop_10espressomd_7_system_6System_dpd_twf, 0, 0, 0},
  {(char *)"dpd_wf", __pyx_getprop_10espressomd_7_system_6System_dpd_wf, 0, 0, 0},
  {(char *)"adress_vars", __pyx_getprop_10espressomd_7_system_6System_adress_vars, 0, 0, 0},
  {(char *)"max_cut_bonded", __pyx_getprop_10espressomd_7_system_6System_max_cut_bonded, 0, 0, 0},
  {(char *)"seed", __pyx_getprop_10espressomd_7_system_6System_seed, __pyx_setprop_10espressomd_7_system_6System_seed, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_10espressomd_7_system_System = {
  PyVarObject_HEAD_INIT(0, 0)
  "espressomd._system.System", /*tp_name*/
  sizeof(struct __pyx_obj_10espressomd_7_system_System), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10espressomd_7_system_System, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10espressomd_7_system_System, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10espressomd_7_system_System, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10espressomd_7_system_6System_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10espressomd_7_system_System, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "_system",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_Actors, __pyx_k_Actors, sizeof(__pyx_k_Actors), 0, 0, 1, 1},
  {&__pyx_n_s_BondedInteractions, __pyx_k_BondedInteractions, sizeof(__pyx_k_BondedInteractions), 0, 0, 1, 1},
  {&__pyx_kp_s_Box_length_must_be_0_in_all_dire, __pyx_k_Box_length_must_be_0_in_all_dire, sizeof(__pyx_k_Box_length_must_be_0_in_all_dire), 0, 0, 1, 0},
  {&__pyx_kp_s_Box_length_must_be_of_length_3, __pyx_k_Box_length_must_be_of_length_3, sizeof(__pyx_k_Box_length_must_be_of_length_3), 0, 0, 1, 0},
  {&__pyx_n_s_CellSystem, __pyx_k_CellSystem, sizeof(__pyx_k_CellSystem), 0, 0, 1, 1},
  {&__pyx_kp_s_No_negative_lengths, __pyx_k_No_negative_lengths, sizeof(__pyx_k_No_negative_lengths), 0, 0, 1, 0},
  {&__pyx_n_s_NonBondedInteractions, __pyx_k_NonBondedInteractions, sizeof(__pyx_k_NonBondedInteractions), 0, 0, 1, 1},
  {&__pyx_n_s_ParticleList, __pyx_k_ParticleList, sizeof(__pyx_k_ParticleList), 0, 0, 1, 1},
  {&__pyx_kp_s_Simulation_time_must_be_0, __pyx_k_Simulation_time_must_be_0, sizeof(__pyx_k_Simulation_time_must_be_0), 0, 0, 1, 0},
  {&__pyx_kp_s_Skin_must_be_0, __pyx_k_Skin_must_be_0, sizeof(__pyx_k_Skin_must_be_0), 0, 0, 1, 0},
  {&__pyx_kp_s_The_list_needs_to_contain_one_se, __pyx_k_The_list_needs_to_contain_one_se, sizeof(__pyx_k_The_list_needs_to_contain_one_se), 0, 0, 1, 0},
  {&__pyx_kp_s_The_seed_has_to_be_an_integer_or, __pyx_k_The_seed_has_to_be_an_integer_or, sizeof(__pyx_k_The_seed_has_to_be_an_integer_or), 0, 0, 1, 0},
  {&__pyx_n_s_Thermostat, __pyx_k_Thermostat, sizeof(__pyx_k_Thermostat), 0, 0, 1, 1},
  {&__pyx_kp_s_Time_Step_must_be_positive, __pyx_k_Time_Step_must_be_positive, sizeof(__pyx_k_Time_Step_must_be_positive), 0, 0, 1, 0},
  {&__pyx_kp_s_Until_we_can_handle_conditional, __pyx_k_Until_we_can_handle_conditional, sizeof(__pyx_k_Until_we_can_handle_conditional), 0, 0, 1, 0},
  {&__pyx_kp_s_Usage_changeVolume_V_new_L_new_x, __pyx_k_Usage_changeVolume_V_new_L_new_x, sizeof(__pyx_k_Usage_changeVolume_V_new_L_new_x), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_n_s_actors, __pyx_k_actors, sizeof(__pyx_k_actors), 0, 0, 1, 1},
  {&__pyx_n_s_adress_vars, __pyx_k_adress_vars, sizeof(__pyx_k_adress_vars), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_bonded_inter, __pyx_k_bonded_inter, sizeof(__pyx_k_bonded_inter), 0, 0, 1, 1},
  {&__pyx_n_s_box_l, __pyx_k_box_l, sizeof(__pyx_k_box_l), 0, 0, 1, 1},
  {&__pyx_n_s_cell_system, __pyx_k_cell_system, sizeof(__pyx_k_cell_system), 0, 0, 1, 1},
  {&__pyx_n_s_cellsystem, __pyx_k_cellsystem, sizeof(__pyx_k_cellsystem), 0, 0, 1, 1},
  {&__pyx_n_s_code_info, __pyx_k_code_info, sizeof(__pyx_k_code_info), 0, 0, 1, 1},
  {&__pyx_n_s_cuda_init, __pyx_k_cuda_init, sizeof(__pyx_k_cuda_init), 0, 0, 1, 1},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_doge, __pyx_k_doge, sizeof(__pyx_k_doge), 0, 0, 1, 1},
  {&__pyx_n_s_getattribute, __pyx_k_getattribute, sizeof(__pyx_k_getattribute), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_interactions, __pyx_k_interactions, sizeof(__pyx_k_interactions), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_num_cells, __pyx_k_max_num_cells, sizeof(__pyx_k_max_num_cells), 0, 0, 1, 1},
  {&__pyx_kp_s_max_num_cells_must_be_min_num_ce, __pyx_k_max_num_cells_must_be_min_num_ce, sizeof(__pyx_k_max_num_cells_must_be_min_num_ce), 0, 0, 1, 0},
  {&__pyx_n_s_min_num_cells, __pyx_k_min_num_cells, sizeof(__pyx_k_min_num_cells), 0, 0, 1, 1},
  {&__pyx_kp_s_min_num_cells_must_be_max_num_ce, __pyx_k_min_num_cells_must_be_max_num_ce, sizeof(__pyx_k_min_num_cells_must_be_max_num_ce), 0, 0, 1, 0},
  {&__pyx_kp_s_min_num_cells_must_be_processor, __pyx_k_min_num_cells_must_be_processor, sizeof(__pyx_k_min_num_cells_must_be_processor), 0, 0, 1, 0},
  {&__pyx_n_s_n_nodes, __pyx_k_n_nodes, sizeof(__pyx_k_n_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_ndarray, __pyx_k_ndarray, sizeof(__pyx_k_ndarray), 0, 0, 1, 1},
  {&__pyx_n_s_node_grid, __pyx_k_node_grid, sizeof(__pyx_k_node_grid), 0, 0, 1, 1},
  {&__pyx_kp_s_node_grid_does_not_fit_n_nodes, __pyx_k_node_grid_does_not_fit_n_nodes, sizeof(__pyx_k_node_grid_does_not_fit_n_nodes), 0, 0, 1, 0},
  {&__pyx_kp_s_node_grid_must_be_0_in_all_direc, __pyx_k_node_grid_must_be_0_in_all_direc, sizeof(__pyx_k_node_grid_must_be_0_in_all_direc), 0, 0, 1, 0},
  {&__pyx_kp_s_node_grid_must_be_of_length_3, __pyx_k_node_grid_must_be_of_length_3, sizeof(__pyx_k_node_grid_must_be_of_length_3), 0, 0, 1, 0},
  {&__pyx_n_s_non_bonded_inter, __pyx_k_non_bonded_inter, sizeof(__pyx_k_non_bonded_inter), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_npt_p_diff, __pyx_k_npt_p_diff, sizeof(__pyx_k_npt_p_diff), 0, 0, 1, 1},
  {&__pyx_n_s_npt_piston, __pyx_k_npt_piston, sizeof(__pyx_k_npt_piston), 0, 0, 1, 1},
  {&__pyx_kp_s_npt_piston_must_be_0, __pyx_k_npt_piston_must_be_0, sizeof(__pyx_k_npt_piston_must_be_0), 0, 0, 1, 0},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_part, __pyx_k_part, sizeof(__pyx_k_part), 0, 0, 1, 1},
  {&__pyx_n_s_particle_data, __pyx_k_particle_data, sizeof(__pyx_k_particle_data), 0, 0, 1, 1},
  {&__pyx_n_s_periodicity, __pyx_k_periodicity, sizeof(__pyx_k_periodicity), 0, 0, 1, 1},
  {&__pyx_kp_s_periodicity_must_be_of_length_3, __pyx_k_periodicity_must_be_of_length_3, sizeof(__pyx_k_periodicity_must_be_of_length_3), 0, 0, 1, 0},
  {&__pyx_n_s_pyx_capi, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_seed, __pyx_k_seed, sizeof(__pyx_k_seed), 0, 0, 1, 1},
  {&__pyx_n_s_setable_properties, __pyx_k_setable_properties, sizeof(__pyx_k_setable_properties), 0, 0, 1, 1},
  {&__pyx_n_s_setattr, __pyx_k_setattr, sizeof(__pyx_k_setattr), 0, 0, 1, 1},
  {&__pyx_n_s_skin, __pyx_k_skin, sizeof(__pyx_k_skin), 0, 0, 1, 1},
  {&__pyx_n_s_skin_set, __pyx_k_skin_set, sizeof(__pyx_k_skin_set), 0, 0, 1, 1},
  {&__pyx_n_s_system, __pyx_k_system, sizeof(__pyx_k_system), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thermostat, __pyx_k_thermostat, sizeof(__pyx_k_thermostat), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_time_step, __pyx_k_time_step, sizeof(__pyx_k_time_step), 0, 0, 1, 1},
  {&__pyx_n_s_timings, __pyx_k_timings, sizeof(__pyx_k_timings), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xyz, __pyx_k_xyz, sizeof(__pyx_k_xyz), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "espressomd/_system.pyx":69
 *         def __set__(self, _box_l):
 *             if len(_box_l) != 3:
 *                 raise ValueError("Box length must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Box_length_must_be_of_length_3); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "espressomd/_system.pyx":72
 *             for i in range(3):
 *                 if _box_l[i] <= 0:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "Box length must be > 0 in all directions")
 *                 box_l[i] = _box_l[i]
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Box_length_must_be_0_in_all_dire); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "espressomd/_system.pyx":177
 *             global node_grid
 *             if len(_node_grid) != 3:
 *                 raise ValueError("node_grid must be of length 3")             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_node_grid_must_be_of_length_3); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "espressomd/_system.pyx":180
 *             for i in range(3):
 *                 if _node_grid[i] <= 0:
 *                     raise ValueError("node_grid must be > 0 in all directions")             # <<<<<<<<<<<<<<
 *                 node_grid[i] = _node_grid[i]
 *             if _node_grid[0] * _node_grid[1] * _node_grid[2] != n_nodes:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_node_grid_must_be_0_in_all_direc); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "espressomd/_system.pyx":216
 *             global npt_piston
 *             if _npt_piston < 0:
 *                 raise ValueError("npt_piston must be > 0")             # <<<<<<<<<<<<<<
 *             nptiso.piston = _npt_piston
 *             mpi_bcast_parameter(FIELD_NPTISO_PISTON)
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_npt_piston_must_be_0); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "espressomd/_system.pyx":240
 *                 raise ValueError(
 *                     "periodicity must be of length 3, got length " + str(len(_periodic)))
 *             periodicity = np.zeros(3)             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "espressomd/_system.pyx":243
 *             for i in range(3):
 *                 if _periodic[i] != 1:
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "Until we can handle conditional compilation, only periodicity [1,1,1] is supported in python interface")
 *             for i in range(3):
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_Until_we_can_handle_conditional); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "espressomd/_system.pyx":255
 *         def __get__(self):
 *             global periodic
 *             periodicity = np.zeros(3)             # <<<<<<<<<<<<<<
 *             periodicity[0] = periodic % 2
 *             periodicity[1] = int(periodic / 2) % 2
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "espressomd/_system.pyx":264
 *         def __set__(self, double _skin):
 *             if _skin <= 0:
 *                 raise ValueError("Skin must be >= 0")             # <<<<<<<<<<<<<<
 *             global skin
 *             skin = _skin
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Skin_must_be_0); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "espressomd/_system.pyx":287
 *         def __set__(self, double _time):
 *             if _time <= 0:
 *                 raise ValueError("Simulation time must be >= 0")             # <<<<<<<<<<<<<<
 *             global sim_time
 *             sim_time = _time
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Simulation_time_must_be_0); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "espressomd/_system.pyx":303
 *                 global lbpar_gpu
 *             if _time_step <= 0:
 *                 raise ValueError("Time Step must be positive")             # <<<<<<<<<<<<<<
 *             IF LB:
 *                 if lbpar.tau >= 0.0 and _time_step > lbpar.tau:
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Time_Step_must_be_positive); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "espressomd/_system.pyx":399
 *                 elif(isinstance(_seed, list) or type(_seed)==np.ndarray):
 *                     if(len(_seed)<self.n_nodes or len(_seed)>self.n_nodes):
 *                         raise ValueError("The list needs to contain one seed value per node")             # <<<<<<<<<<<<<<
 * 
 *                     for i in range(len(_seed)):
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_The_list_needs_to_contain_one_se); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "espressomd/_system.pyx":406
 *                     mpi_random_seed(self.n_nodes,seed_array)
 *                 else:
 *                         raise ValueError("The seed has to be an integer or a list of integers with one integer per node")             # <<<<<<<<<<<<<<
 * 
 *             def __get__(self):
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_The_seed_has_to_be_an_integer_or); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 406; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "espressomd/_system.pyx":419
 *         """
 *         if d_new < 0:
 *             raise ValueError("No negative lengths")             # <<<<<<<<<<<<<<
 *         if dir == "xyz":
 *             d_new = d_new**(1. / 3.)
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_No_negative_lengths); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "espressomd/_system.pyx":430
 *             rescale_boxl(2, d_new)
 *         else:
 *             raise ValueError(             # <<<<<<<<<<<<<<
 *                 'Usage: changeVolume { <V_new> | <L_new> { "x" | "y" | "z" | "xyz" } }')
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Usage_changeVolume_V_new_L_new_x); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_system(void); /*proto*/
PyMODINIT_FUNC init_system(void)
#else
PyMODINIT_FUNC PyInit__system(void); /*proto*/
PyMODINIT_FUNC PyInit__system(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__system(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_system", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_espressomd___system) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "espressomd._system")) {
      if (unlikely(PyDict_SetItemString(modules, "espressomd._system", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  if (__Pyx_ExportVoidPtr(__pyx_n_s_skin_set, (void *)&__pyx_v_10espressomd_7_system_skin_set, "bool") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_10espressomd_7_system_System) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_10espressomd_7_system_System.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "System", (PyObject *)&__pyx_type_10espressomd_7_system_System) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10espressomd_7_system_System = &__pyx_type_10espressomd_7_system_System;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif

  /* "espressomd/_system.pyx":22
 * 
 * from globals cimport *
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cimport integrate
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/_system.pyx":25
 * 
 * cimport integrate
 * import interactions             # <<<<<<<<<<<<<<
 * from actors import Actors
 * cimport cuda_init
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_interactions, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_interactions, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/_system.pyx":26
 * cimport integrate
 * import interactions
 * from actors import Actors             # <<<<<<<<<<<<<<
 * cimport cuda_init
 * import particle_data
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Actors);
  __Pyx_GIVEREF(__pyx_n_s_Actors);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Actors);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_actors, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Actors); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Actors, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":28
 * from actors import Actors
 * cimport cuda_init
 * import particle_data             # <<<<<<<<<<<<<<
 * import cuda_init
 * import code_info
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_particle_data, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_particle_data, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":29
 * cimport cuda_init
 * import particle_data
 * import cuda_init             # <<<<<<<<<<<<<<
 * import code_info
 * from thermostat import Thermostat
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cuda_init, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cuda_init, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":30
 * import particle_data
 * import cuda_init
 * import code_info             # <<<<<<<<<<<<<<
 * from thermostat import Thermostat
 * from cellsystem import CellSystem
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_code_info, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_code_info, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":31
 * import cuda_init
 * import code_info
 * from thermostat import Thermostat             # <<<<<<<<<<<<<<
 * from cellsystem import CellSystem
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Thermostat);
  __Pyx_GIVEREF(__pyx_n_s_Thermostat);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Thermostat);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_thermostat, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Thermostat); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Thermostat, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "espressomd/_system.pyx":32
 * import code_info
 * from thermostat import Thermostat
 * from cellsystem import CellSystem             # <<<<<<<<<<<<<<
 * 
 * setable_properties=["box_l","max_num_cells","min_num_cells",
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_CellSystem);
  __Pyx_GIVEREF(__pyx_n_s_CellSystem);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_CellSystem);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_cellsystem, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_CellSystem); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CellSystem, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":34
 * from cellsystem import CellSystem
 * 
 * setable_properties=["box_l","max_num_cells","min_num_cells",             # <<<<<<<<<<<<<<
 *                     "node_grid","npt_piston","npt_p_diff",
 *                     "periodicity","skin","time",
 */
  __pyx_t_2 = PyList_New(11); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_box_l);
  __Pyx_GIVEREF(__pyx_n_s_box_l);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_box_l);
  __Pyx_INCREF(__pyx_n_s_max_num_cells);
  __Pyx_GIVEREF(__pyx_n_s_max_num_cells);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_max_num_cells);
  __Pyx_INCREF(__pyx_n_s_min_num_cells);
  __Pyx_GIVEREF(__pyx_n_s_min_num_cells);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_min_num_cells);
  __Pyx_INCREF(__pyx_n_s_node_grid);
  __Pyx_GIVEREF(__pyx_n_s_node_grid);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_node_grid);
  __Pyx_INCREF(__pyx_n_s_npt_piston);
  __Pyx_GIVEREF(__pyx_n_s_npt_piston);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_npt_piston);
  __Pyx_INCREF(__pyx_n_s_npt_p_diff);
  __Pyx_GIVEREF(__pyx_n_s_npt_p_diff);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_npt_p_diff);
  __Pyx_INCREF(__pyx_n_s_periodicity);
  __Pyx_GIVEREF(__pyx_n_s_periodicity);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_periodicity);
  __Pyx_INCREF(__pyx_n_s_skin);
  __Pyx_GIVEREF(__pyx_n_s_skin);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_skin);
  __Pyx_INCREF(__pyx_n_s_time);
  __Pyx_GIVEREF(__pyx_n_s_time);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_time);
  __Pyx_INCREF(__pyx_n_s_time_step);
  __Pyx_GIVEREF(__pyx_n_s_time_step);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_time_step);
  __Pyx_INCREF(__pyx_n_s_timings);
  __Pyx_GIVEREF(__pyx_n_s_timings);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_timings);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setable_properties, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "espressomd/_system.pyx":40
 * 
 * cdef class System:
 *     doge = 1             # <<<<<<<<<<<<<<
 *     part = particle_data.ParticleList()
 *     non_bonded_inter = interactions.NonBondedInteractions()
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_7_system_System->tp_dict, __pyx_n_s_doge, __pyx_int_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyType_Modified(__pyx_ptype_10espressomd_7_system_System);

  /* "espressomd/_system.pyx":41
 * cdef class System:
 *     doge = 1
 *     part = particle_data.ParticleList()             # <<<<<<<<<<<<<<
 *     non_bonded_inter = interactions.NonBondedInteractions()
 *     bonded_inter = interactions.BondedInteractions()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_particle_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ParticleList); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_7_system_System->tp_dict, __pyx_n_s_part, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10espressomd_7_system_System);

  /* "espressomd/_system.pyx":42
 *     doge = 1
 *     part = particle_data.ParticleList()
 *     non_bonded_inter = interactions.NonBondedInteractions()             # <<<<<<<<<<<<<<
 *     bonded_inter = interactions.BondedInteractions()
 *     cell_system = CellSystem()
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_interactions); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_NonBondedInteractions); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_7_system_System->tp_dict, __pyx_n_s_non_bonded_inter, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10espressomd_7_system_System);

  /* "espressomd/_system.pyx":43
 *     part = particle_data.ParticleList()
 *     non_bonded_inter = interactions.NonBondedInteractions()
 *     bonded_inter = interactions.BondedInteractions()             # <<<<<<<<<<<<<<
 *     cell_system = CellSystem()
 *     thermostat = Thermostat()
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_interactions); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BondedInteractions); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_7_system_System->tp_dict, __pyx_n_s_bonded_inter, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10espressomd_7_system_System);

  /* "espressomd/_system.pyx":44
 *     non_bonded_inter = interactions.NonBondedInteractions()
 *     bonded_inter = interactions.BondedInteractions()
 *     cell_system = CellSystem()             # <<<<<<<<<<<<<<
 *     thermostat = Thermostat()
 * 
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_CellSystem); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_7_system_System->tp_dict, __pyx_n_s_cell_system, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10espressomd_7_system_System);

  /* "espressomd/_system.pyx":45
 *     bonded_inter = interactions.BondedInteractions()
 *     cell_system = CellSystem()
 *     thermostat = Thermostat()             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Thermostat); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_1) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10espressomd_7_system_System->tp_dict, __pyx_n_s_thermostat, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10espressomd_7_system_System);

  /* "espressomd/_system.pyx":1
 * #             # <<<<<<<<<<<<<<
 * # Copyright (C) 2013,2014,2015,2016 The ESPResSo project
 * #
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init espressomd._system", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init espressomd._system");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig) {
    PyObject *d;
    PyObject *cobj = 0;
    d = PyDict_GetItem(__pyx_d, __pyx_n_s_pyx_capi);
    Py_XINCREF(d);
    if (!d) {
        d = PyDict_New();
        if (!d)
            goto bad;
        if (__Pyx_PyObject_SetAttrStr(__pyx_m, __pyx_n_s_pyx_capi, d) < 0)
            goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItem(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
